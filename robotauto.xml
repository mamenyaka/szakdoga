<?xml version="1.0" encoding="UTF-8"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1" xml:lang="hu">
    <info>
        <title>Robotautó Világbajnokság</title>
        <subtitle>Debreceni Egyetem Informatikai Kar</subtitle>
        <author>
            <personname>
                <honorific>Dr.</honorific>
                <surname>Bátfai</surname>
                <firstname>Norbert</firstname>
            </personname>
            <affiliation>
                <shortaffil>E. adjunktus, DEIK.</shortaffil>
                <jobtitle>Egyetemi adjunktus</jobtitle>
                <orgname>Debreceni Egyetem, Informatikai Kar</orgname>
                <orgdiv>Információ Technológia Tanszék</orgdiv>
                <address>
                    <email>batfai.norbert@inf.unideb.hu</email>
                    <email>nbatfai@gmail.com</email>
                </address>
            </affiliation>
            <address>
                <street>Kassai út 26.</street>
                <city>Debrecen</city>
                <postcode>4028</postcode>
                <country>Magyarország</country>
                <email>batfai.norbert@inf.unideb.hu</email>
                <otheraddr>
                    <link xlink:href="http://www.inf.unideb.hu/~nbatfai">http://www.inf.unideb.hu/~nbatfai</link>
                </otheraddr>
            </address>
        </author>
        <author>
            <personname>
                <surname>Mamenyák</surname>
                <firstname>András</firstname>
            </personname>
            <affiliation>
                <jobtitle>Mérnökinformatikus</jobtitle>
                <orgname>Debreceni Egyetem, Informatikai Kar</orgname>
                <orgdiv>Információ Technológia Tanszék</orgdiv>
                <address>
                    <email>mamenyaka@gmail.com</email>
                </address>
            </affiliation>
        </author>
        <pubdate>2015</pubdate>
        <copyright>
            <year>2015</year>
            <holder>Dr. Bátfai Norbert</holder>
            <holder>Mamenyák András</holder>
        </copyright>
        <legalnotice>
            <para>
                Robotautó Világbajnokság
            </para>
            <para>
                Ez a program szabad szoftver; terjeszthető illetve módosítható a
                Free Software Foundation által kiadott GNU General Public License
                dokumentumában leírtak; akár a licenc 3-as, akár (tetszőleges) későbbi
                változata szerint.
            </para>
            <para>
                Ez a program abban a reményben kerül közreadásra, hogy hasznos lesz,
                de minden egyéb GARANCIA NÉLKÜL, az ELADHATÓSÁGRA vagy VALAMELY CÉLRA
                VALÓ ALKALMAZHATÓSÁGRA való származtatott garanciát is beleértve.
                További részleteket a GNU General Public License tartalmaz.
            </para>
            <para>
                A felhasználónak a programmal együtt meg kell kapnia a GNU General
                Public License egy példányát; ha mégsem kapta meg, akkor
                tekintse meg a
                <link xlink:href="http://www.gnu.org/licenses">http://www.gnu.org/licenses</link>
                oldalon.
            </para>
            <para>
                <link xlink:href="http://gnu.hu/gplv3.html">http://gnu.hu/gplv3.html</link>
            </para>
        </legalnotice>
        <revhistory>
            <revision>
                <revnumber>0.0.1</revnumber>
                <date>2014-11-24</date>
                <revremark>
                    Iniciális dokumentum az aktuális és jövőbeli diplomamunkások támogatására.
                    A szereplő tételekből kiindulva a jelöltek könnyebben készíthetik el a saját munkájukra hangolva a
                    saját tartalomjegyzéküket.
                </revremark>
            </revision>
            <revision>
                <revnumber>0.0.2</revnumber>
                <date>2014-11-25</date>
                <revremark>Térképmegoldások összehasonlítása</revremark>
            </revision>
            <revision>
                <revnumber>0.0.3</revnumber>
                <date>2014-11-26</date>
                <revremark>OSM XML leírás fejezet</revremark>
            </revision>
            <revision>
                <revnumber>0.0.4</revnumber>
                <date>2014-11-27</date>
                <revremark>OSM XML példa fejezet</revremark>
            </revision>
            <revision>
                <revnumber>0.0.5</revnumber>
                <date>2014-11-28</date>
                <revremark>libosmium bemutatása, telepítés leírása</revremark>
            </revision>
            <revision>
                <revnumber>0.0.6</revnumber>
                <date>2014-12-01</date>
                <revremark>libosmium példaprogramok elkezd</revremark>
            </revision>
            <revision>
                <revnumber>0.0.7</revnumber>
                <date>2015-04-20</date>
                <revremark>doksi felfrissítése</revremark>
            </revision>
            <revision>
                <revnumber>0.0.8</revnumber>
                <date>2015-04-21</date>
                <revremark>libosmium példaprogramok befejez</revremark>
            </revision>
            <revision>
                <revnumber>0.0.9</revnumber>
                <date>2015-04-22</date>
                <revremark>Bevezetés fejezet elkezd</revremark>
            </revision>
            <revision>
                <revnumber>0.0.10</revnumber>
                <date>2015-04-23</date>
                <revremark>Bevezetés fejezet befejez</revremark>
            </revision>
            <revision>
                <revnumber>0.0.11</revnumber>
                <date>2015-04-24</date>
                <revremark>Robotautó Világbajnokság koncepció és SRS fejezet</revremark>
            </revision>
            <revision>
                <revnumber>0.0.12</revnumber>
                <date>2015-04-28</date>
                <revremark>Saját fejlesztés fejezet elkezd</revremark>
            </revision>
            <revision>
                <revnumber>0.0.13</revnumber>
                <date>2015-04-29</date>
                <revremark>Saját fejlesztés fejezet befejez</revremark>
            </revision>
            <revision>
                <revnumber>0.0.14</revnumber>
                <date>2015-04-30</date>
                <revremark>Összegzés fejezet</revremark>
            </revision>
            <revision>
                <revnumber>0.0.15</revnumber>
                <date>2015-05-01</date>
                <revremark>Javítások</revremark>
            </revision>
        </revhistory>
    </info>
    <section>
        <title>Bevezetés</title>
        <para>
            Napjaink egyik legfelkapotabb témája,
            ami teljesen más elgondolásban világítaná meg a közlekedésről alkotott képünket, 
            és ami gyökeresen változtatná meg egy egész város életét,
            nem más, mint az autóipar és a számítástechnika gyermeke,
            a vezető nélküli autók, vagy másnéven, az önjáró autók.
            Nem kisebb nevek, mint maga a Google, és számos piacvezető autógyártó cég,
            mint például az Audi, BMW, Chevrolet, Mercedes vagy a Toyota töri azon a fejét, hogy
            hogyan lehetne a Sci-Fi filmek által előrevetített jövőképet elhozni a XXI. századba.
        </para>
        <para>
            Dolgozatom célja egy olyan emulátor tervezése és implementálása,
            amely a város és a benne közlekedő önvezető autók kapcsolatát vizsgálja.
            A koncepció azt feltételezi, hogy a közeljövőben egy adott városban kizárólag ilyen robotautók közlekednek,
            a hagyományos autók egyáltalán nem vesznek részt a forgalomban.
            Minden egyes autó összekötettésben áll egymással és magával a várossal, így a forgalom szinte életre kel.
            A város ismeri az autók helyzetét és mozgását, ezáltal képes lehet mozgásban tartani a forgalmat,
            azzal, hogy megelőzi a dugókat és az egyéb fennakadásokat.
        </para>
        <para>
            A közlekedésben az egyik legfontosabb szerepet a megfelelő útvonal kiválasztása játssza.
            Ahhoz, hogy meg tudjuk tervezni a legjobb útvonalat szükségük van minél több információra a jelenlegi
            forgalmi helyzettel kapcsolatban.
            Ha tudjuk minden autó helyzetét és mozgását, könnyű megbecsülni, melyik útvonal lehet az ideális az autó számára,
            mind az idő szempontjából, mind a forgalom szempontjából.
            A robotautóknak csak annyi a dolguk, hogy közlik a városi forgalomirányító felhővel, hogy hova szeretnének eljutni,
            a városi adatfelhő meg elvégzi az útvonalkeresést.
            Az útvonalkeresés az emulátor lelke, a legfőbb komponens, ezért
            egy verseny keretében kutatjuk azt a forgalomirányító algoritmust,
            amelyik a legjobban vezérli a forgalmat.
        </para>
        <para>
            Az emulátor tetszőleges térképen teremti meg virtuálisan a jövő forgalmát,
            és ebből adódóan a világ összes városa otthont adhat a versenynek.
            Ez a tény ihlette dolgozatom címét, ami miatt a vezérlő algoritmusok versenyét világbajnokságnak is hívhatjuk,
            remélve, hogy a platform keretein belül jelesen szereplő algoritmusok egyike vezérli majd a jövő robotautóit.
        </para>
        <section>
            <title>Szakirodalmi háttér</title>
            <para>
                A tudományos szakirodalomban is jelen vannak a robotautó témájú publikációk,
                mint például a <citation>Singapore</citation> esettanulmány, ami azt vizsgálja,
                hogy milyen előnyökkel járna, ha Szingapúr városának személyszállítását lecserélnénk megosztott önjáró autókra.
                A hivatkozott cikk egy matematikai modell alapján kiszámolta,
                hogy legkevesebb 92 693 ilyen autóra lenne szükség a 2008-ban számolt 1 144 400 háztartás ellátásához.
                A kényelmesebb várakozási idő érdekében ez a szám elérheti a 200-300 ezres határt is,
                viszont még ez a szám is csak körülbelül a jelenlegi autók számának mindössze az 1/3-a.
            </para>
            <para>
                A forgalom szimulációs modelleket három nagy csoportba kategorizálhatjuk:
                <itemizedlist>
                    <listitem>
                        <para>
                            a mikroszkopikus modellek <citation>Micro</citation>,
                            amiben az autók, mint egyedi ágensek vesznek részt.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            a sejt modellek <citation>Cellular</citation>,
                            amiben az út cellákra van felbontva és
                            az autókat sztochasztikus szabályok irányítják celláról cellára.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            a kontinuum modellek <citation>Macro</citation>,
                            ami tovább bontható mezoszkopikus (gáz-kinetikus) és
                            makroszkopikus (folyadék-dinamikai) modellekre.
                        </para>
                    </listitem>
                </itemizedlist>
                A mi modellünk a mikroszkopikus modellek kategóriájába esik,
                mivel a forgalmat egyedi robotautó ágensek alkotják.
            </para>
        </section>
        <section>
            <title>A dolgozat szervezése és szerkezete</title>
            <para>
                A dolgozat két fő fejezetből áll.
                A bevezető gondolatok után az első fejezet "A fejlesztés háttere", ami
                összefoglalja a fejlesztést megelőző kutatómunkát, melynek keretein belül számos kisebb példaprogram is készült.
                Ezeken a példaprogramok keresztül ismerkedtem meg a kiválasztott térképmegoldással és az azt támogató könyvtárral.
                A fejezet végén bemutatásra kerül a Robotautó Világbajnokság követelmény specifikáció dokumentuma,
                ami vázolja a koncepciót és bemutatja az emulátor egyik gyors prototípusát.
                A második fejezet az általam fejlesztett robotautó emulátort mutatja be részletesen,
                annak tervezését és kivitelezését, a fejlesztés során felmerült problémákat és azok megoldását,
                majd végül a használatát és eredményeit.
                A dolgozatot az összegző gondolatok és a jövőbeli tervek zárják.
            </para>
            <para>
                Dolgozatom DocBook 5.1 jelölőnyelvben készült,
                ami kimondottan a szoftverről szóló könyveket és dolgozatokat támogatja.
                A dolgozat a legfrissebb hivatalos DocBook dokumentáció <citation>DocBook</citation> alapján íródott.
            </para>
            <para>
                Az XML forrás elérhető az alábbi git tárolóban:
                <link xlink:href="https://bitbucket.org/mamenyaka/szakdoga">
                    https://bitbucket.org/mamenyaka/szakdoga
                </link>.
                A teljes tároló leklónozását az alábbi paranccsal hajthatjuk végre,
                mivel a repó submodule-okat is tartalmaz.
                <screen>
<![CDATA[
andras@G53SW:~$ git clone --recursive https://bitbucket.org/mamenyaka/szakdoga.git
Cloning into 'szakdoga'...
...
Submodule 'src/buszjarat' (git@bitbucket.org:mamenyaka/buszjarat.git) registered for path 'src/buszjarat'
Submodule 'src/utcak' (git@bitbucket.org:mamenyaka/utcak.git) registered for path 'src/utcak'
Cloning into 'src/buszjarat'...
...
Submodule path 'src/buszjarat': checked out '1c649b4f5d0958eeec23c86b0ef51f2663540b62'
Cloning into 'src/utcak'...
...
Submodule path 'src/utcak': checked out '9a29f6560f0f6934d4d0237d114e7ccad11514e3'
]]>
                </screen>
            </para>
            <para>
                DocBook XML-ből PDF-et a <emphasis>dblatex</emphasis> eszközzel lehet előállítani,
                ami köztes lépésként LaTeX formátumba konvertál, majd abból állítja elő a PDF-et.
                Ennek a lépésnek a támogatására egy egyszerű Makefile lett létrehozva,
                ami először a <emphasis>jing</emphasis> eszközzel validálja az XML fájlt,
                majd a <emphasis>dblatex</emphasis> eszközzel előállítja az olvasható PDF dokumentumot.
                <screen>
<![CDATA[
andras@G53SW:~/szakdoga$ make
jing -c http://docbook.org/xml/5.1CR3/rng/docbookxi.rnc robotauto.xml
dblatex robotauto.xml
...
'robotauto.pdf' successfully built
]]>
                </screen>
            </para>
        </section>
    </section>
    <section>
        <title>Tárgyalás</title>
        <section>
            <title>A fejlesztés háttere</title>
            <section>
                <title>Térképmegoldások összehasonlítása</title>
                <para>
                    Az emulátor bemenetét egy adott város térképe biztosítja, ezért fontos,
                    hogy jó minőségű, megszorítások nélkül használható megoldást találjunk.
                    Jelenleg a piacon lévő elterjedt térképmegoldások a következőek:
                    Google Maps, HERE, Bing Maps és OpenStreetMap.
                    Ezek közt kell megtalálni az elvárásoknak legjobban megfelelőt,
                    azt amelyik a legtöbb lehetőséget nyújtja.
                    Kizáró oknak minősül, ha a vizsgált megoldás nem rendelkezik kellően szabad licenccel.
                </para>
                <section>
                    <title>Google Maps</title>
                    <para>
                        Napjaink egyik legelterjedtebb térképmegoldása a Google Maps, amit a Google cég fejleszt.
                        A világ összes országának kiváló minőségű térképe ingyenesen elérhető a weben
                        (<link xlink:href="https://www.google.com/maps">https://www.google.com/maps</link>)
                        vagy okostelefon alkalmazással.
                        2013-ban a világ leggyakrabban használt okostelefon alkalmazása a Google Maps volt a GlobalWebIndex alapján
                        <citation>GWI</citation>.
                    </para>
                    <para>
                        A Google Maps számos API-t sorakoztat fel, amik lehetővé teszik,
                        hogy beágyazzuk a Google Maps térképeit, funkcióit saját weblapunkba vagy alkalmazásunkba.
                        Ezek az API-k a következők
                        (<link xlink:href="https://developers.google.com/maps/documentation">
                            https://developers.google.com/maps/documentation
                        </link>):
                        <itemizedlist>
                            <listitem>
                                <para>JavaScript API v3</para>
                            </listitem>
                            <listitem>
                                <para>Google Maps SDK for iOS</para>
                            </listitem>
                            <listitem>
                                <para>Web Services</para>
                            </listitem>
                            <listitem>
                                <para>Maps Image APIs</para>
                            </listitem>
                            <listitem>
                                <para>Maps for Work</para>
                            </listitem>
                            <listitem>
                                <para>Maps Android API</para>
                            </listitem>
                            <listitem>
                                <para>Places API</para>
                            </listitem>
                            <listitem>
                                <para>Google Earth API</para>
                            </listitem>
                        </itemizedlist>
                    </para>
                    <para>
                        Licenc szempontjából sok megszorítás van a Google Maps API ingyenes használatában.
                        Többek közt kötelező, hogy a szolgáltatásunk ingyenesen és nyilvánosan elérhető legyen.
                        Továbbá alkalmazásunk nem haladhatja meg a 2500 kérés/nap határt sem
                        (részletesebben lásd:
                        <link xlink:href="https://developers.google.com/maps/licensing">
                            https://developers.google.com/maps/licensing
                        </link>).
                        A licenc megtiltja, hogy lemásoljuk, módosítsuk vagy exportáljuk a Google Maps API által szolgáltatott adatokat
                        (lásd a 10.1.3-as részt, "Restrictions against Copying or Data Export":
                        <link xlink:href="https://developers.google.com/maps/terms">
                            https://developers.google.com/maps/terms
                        </link>).
                    </para>
                    <para>
                        A licenc szigorúsága miatt elvetettük a Google Maps használatát a Robotautó emulátorban.
                        Lehetséges felhasználási terület: Androidos megjelenítő kliensekben, ahol a Google Maps térképre rajzoljuk ki az eredményt.
                    </para>
                </section>
                <section>
                    <title>HERE</title>
                    <para>
                        A HERE (régebbi nevén Ovi Maps és Nokia Maps) a Nokia cég által fejlesztett termékcsomag, ami magába foglalja közel 200 ország térképét.
                        A szolgáltatás elérhető a weben
                        (<link xlink:href="http://here.com">http://here.com</link>)
                        vagy okostelefon alkalmazással.
                    </para>
                    <para>
                        A HERE API-k a következők
                        (<link xlink:href="https://developer.here.com/">https://developer.here.com</link>):
                        <itemizedlist>
                            <listitem>
                                <para>
                                    JavaScript API-k:
                                    Maps API for JavaScript 3.x,
                                    Maps API for JavaScript 2.x,
                                    Maps API for JavaScript Enterprise 2.x
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    REST API-k:
                                    Map Tile API,
                                    Map Image API,
                                    Venue Maps API,
                                    Routing API,
                                    Enterprise Routing API,
                                    Matrix Routing API,
                                    Geocoder API,
                                    Batch Geocoder API,
                                    Custom Location API,
                                    Places API,
                                    Traffic API
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                    <para>
                        A licenc megtiltja, hogy "a Tartalmat nem másolja, nem adja át, nem értékesíti, nem értékesíti újból, nem adja kölcsön, bérbe, nem kínálja fel, nem közvetíti, küldi el, nem terjeszti, nem ruházza át, a nyilvánossággal nem közli, nem sokszorosítja, módosítja, jeleníti meg, nem adja elő, kereskedelmi célokra nem használja, illetőleg nem teszi elérhetővé"
                        (lásd a 6-os részt, "A Tartalom":
                        <link xlink:href="http://here.com/terms/service-terms/hu">
                            http://here.com/terms/service-terms/hu
                        </link>).
                    </para>
                    <para>
                        A licenc megszorításai miatt elvetettük a HERE használatát a Robotautó emulátorban.
                        Lehetséges felhasználási terület: Webes, Androidos, Windows Phone-os megjelenítő.
                    </para>
                </section>
                <section>
                    <title>Bing Maps</title>
                    <para>
                        A Bing Maps platform a Microsoft cég által fejlesztett Bing kereső szolgáltatás része, régebbi nevén Microsoft Virtual Earth.
                        A szolgáltatás elérhető a weben
                        (<link xlink:href="http://www.bing.com/maps">http://www.bing.com/maps</link>)
                        és Windows Phone platformon.
                    </para>
                    <para>
                        A Bing Maps API-k a következők
                        (<link xlink:href="http://www.microsoft.com/maps/choose-your-bing-maps-API.aspx">
                            http://www.microsoft.com/maps/choose-your-bing-maps-API.aspx
                        </link>):
                        <itemizedlist>
                            <listitem>
                                <para>
                                    Windows Store alkalmazásokhoz:
                                    JavaScript API,
                                    .NET API
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Bing Maps AJAX Control 7.0 (Microsoft.Maps API-k):
                                    AdvancedShapes API,
                                    Directions API,
                                    Search API,
                                    Traffic API,
                                    VenueMaps API
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    REST API-k:
                                    Locations API,
                                    Elevations API,
                                    Imagery API,
                                    Routes API,
                                    Traffic API
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Spatial Data Services API-k:
                                    Geocode Dataflow API,
                                    Data Source Management API,
                                    Query API,
                                    Geodata API
                                </para>
                            </listitem>
                            <listitem>
                                <para>Windows Presentation Foundation Control (WPF) API</para>
                            </listitem>
                        </itemizedlist>
                    </para>
                    <para>
                        A licencben előírt megszorítások tiltják, hogy lemásoljuk, tároljuk, archiváljuk vagy a Tartalom alapján adatbázist hozzunk létre
                        (lásd a 3.2-es részt, "General Restrictions":
                        <link xlink:href="http://www.microsoft.com/maps/product/terms.html">
                            http://www.microsoft.com/maps/product/terms.html
                        </link>).
                    </para>
                    <para>
                        A licenc megszorításai miatt elvetettük a Bing Maps használatát a Robotautó emulátorban.
                        Lehetséges felhasználási terület: Webes, Windows-os megjelenítő.
                    </para>
                </section>
                <section>
                    <title>OpenStreetMap</title>
                    <para>
                        Az OpenStreetMap
                        (<link xlink:href="http://www.openstreetmap.org">http://www.openstreetmap.org</link>)
                        egy olyan közösségi projekt,
                        aminek célja egy nyíltan használható, módosítható térkép készítése az egész világról.
                        A projektet a Wikipédia sikeressége ihlette, ami bebizonyította, hogy közösségi adatgyűjtéssel nagy mennyiségű és jó minőségű adatokat lehet előállítani.
                        Az egyetlen hátránya az, hogy előforduló hibákat nehezen lehet javítani,
                        de a közösség nagy része jó szándékú, így az esetleges pontatlanságokat automatikusan javítják.
                    </para>
                    <para>
                        Kereskedelmi térképek adataiban található számos csapda, amivel el lehet kapni azokat, akik ezt másolják.
                        Erre példa a nem létező, hamis utcák, szándékosan hiányzó utcák, nem létező iskolák, stb.
                        Emiatt a közreműködők légi fotók, GPS eszközök és egyéb ingyenes térképek
                        (mint például nemzeti térképészeti ügynökségek nyílt térképei)
                        segítségével járulnak hozzá, ellenőrzik és tartják karban az OSM adatbázist.
                        A legújabb adatok szerint az OpenStreetMap regisztrált felhasználóinak száma közel 2 millió <citation>OSMstats</citation>.
                    </para>
                    <para>
                        2010-ben a Bing bejelentette, hogy a Bing Maps légi felvételeit szabadon felhasználhatja az OpenStreetMap közösség arra a célra,
                        hogy a képek alapján nyomkövethetik az utakat, épületeket, stb., gyarapítva ezzel az OSM adatbázist <citation>BingAerial</citation>
                    </para>
                    <para>
                        Az OpenStreetMap-nak egyetlen saját API-ja van, a REST API alapú OSM Editing API,
                        ami OSM adatbázis nyers geoadatainak letöltésére és feltöltésére szolgál
                        (<link xlink:href="http://wiki.openstreetmap.org/wiki/API">
                            http://wiki.openstreetmap.org/wiki/API
                        </link>).
                    </para>
                    <para>
                        Az OpenStreetMap nyílt adatokból áll, aminek licence az Open Data Commons Open Database License (ODbL)
                        (lásd <link xlink:href="http://www.openstreetmap.org/copyright">
                            http://www.openstreetmap.org/copyright
                        </link>).
                        Ez a licenc lehetővé teszi, hogy szabadon lemásoljuk, terjesszük, módosítsuk az adatokat.
                        Egyetlen feltétele, hogy ha módosítjuk az adatokat, vagy ha az adatokra épülő szolgáltatást készítünk, akkor csak ugyanazzal a licenc-el tehetjük.
                    </para>
                    <para>
                        A megfelelő minőségű adatoknak és a kedvező licencnek köszönhetően támogatjuk az OpenStreetMap használatát a Robotautó emulátorban.
                    </para>
                </section>
                <section>
                    <title>Összegzés</title>
                    <para>
                        A Robotautó Világbajnokság emulátora az OpenStreetMap térképeit fogja használni.
                    </para>
                    <para>
                        Kérdés: De miért nem egyszerűen a Google Maps-t használjuk, mint mindenki más?
                    </para>
                    <para>
                        Válasz: Azok az adatok szerzői jog által védve vannak és több szervezet tulajdonában állnak, mint például a NAVTEQ vagy a Tele Atlas.
                        A Google csak licenceli az adatokat. Ha használni akarnánk, fizetnünk kéne értük.
                        Ezzel ellentétben az OpenStreetMap teljesen ingyenes és nyílt licencű.
                    </para>
                </section>
            </section>
            <section>
                <title>OpenStreetMap XML szerkezete</title>
                <para>
                    Az OpenStreetMap nyers térkép adatait XML formátumban tudjuk letölteni (exportálni) a projekt honlapjáról.
                    Az így kapott állomány kiterjesztése egy teljesen valid XML dokumentum, melynek kiterjesztése ".osm".
                    Ha a teljes bolygóra vonatkozó adatokat le akarjuk tölteni, azt is megtehetjük az alábbi linken:
                    <link xlink:href="http://planet.openstreetmap.org">http://planet.openstreetmap.org</link>.
                    Jelenlegi (2015.04) mérete a tömörített planet állománynak XML formátumban 41 GB,
                    PBF (Protocolbuffer Binary Format) formátumban 27 GB
                    (bővebben lásd:
                    <link xlink:href="http://wiki.openstreetmap.org/wiki/PBF_Format">
                        http://wiki.openstreetmap.org/wiki/PBF_Format
                    </link>).
                </para>
                <para>
                    Legtöbb esetben csak egy város térképére van szükségünk, amit az alábbi módon exportálhatunk:
                    <figure xml:id="osmexport">
                        <title>Debrecen város térképének exportálása</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="figures/osmexport.png"/>
                            </imageobject>
                        </mediaobject>
                    </figure>
                </para>
                <para>
                    Az XML állomány szerkezetileg három fő adat alkotóelemből (adat primitívekből, objektumokból) és azok címkéiből épül fel:
                    <itemizedlist>
                        <listitem>
                            <para>nodes (csomópontok)</para>
                            <para>
                                A <emphasis>csomópont</emphasis> meghatároz egy adott pontot a Föld felszínén, annak földrajzi hosszúságát és szélességét.
                                Az OpenStreetMap a WGS84 koordináta rendszert használja.
                                Példa: buszmegálló, pad, jelzőlámpa.
                            </para>
                        </listitem>
                        <listitem>
                            <para>ways (utak)</para>
                            <para>
                                Az <emphasis>út</emphasis> a csomópontok egy rendezett listája.
                                Példa: utak, folyók, területek határvonalai.
                            </para>
                        </listitem>
                        <listitem>
                            <para>relations (kapcsolatok)</para>
                            <para>
                                A <emphasis>kapcsolat</emphasis> olyan adatszerkezet, ami több tag kapcsolatát írja le, azoknak egy rendezett listája.
                                A tagok lehetnek utak, csomópontok vagy akár további kapcsolatok,
                                és tartalmazzák a <emphasis>member type</emphasis> (tag típus) és a <emphasis>role</emphasis> (szerep) címkéket.
                                Általában a típus címke határozza meg a kapcsolat értelmét.
                                Példa: buszjárat, ami csomópontok listájából (megállókból) és utakból áll.
                            </para>
                        </listitem>
                        <listitem>
                            <para>tags (címkék)</para>
                            <para>
                                A címkék jelentést adhatnak az egyes adatelemeknek, de használatuk opcionális.
                                Két részből állnak: kulcs és érték.
                                Példa: "highway=pedestrian", ami a gyalogos utat jelent.
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>
                    Minden csomópontnak, útnak és kapcsolatnak a következő attribútumai vannak az adatbázisban:
                    <itemizedlist>
                        <listitem>
                            <para>
                                id
                            </para>
                            <para>
                                Értéke egy szám, ami egyértelműen beazonosítja az adott adatelemet.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                user
                            </para>
                            <para>
                                Értéke az a regisztrált felhasználónév, aki létrehozta vagy utoljára módosította az adott objektumot.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                uid
                            </para>
                            <para>
                                Felhasználó azonosító. A felhasználónév változhat, de az id nem
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                timestamp
                            </para>
                            <para>
                                Időbélyeg, a legutolsó módosítás idejét tartalmazza.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                visible
                            </para>
                            <para>
                                Lehet igaz vagy hamis.
                                Ha a visible értéke hamis, akkor az objektum törölve lett az adatbázisból.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                version
                            </para>
                            <para>
                                Kezdetben 1, minden módosításnál egyel nő az értéke.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                changeset
                            </para>
                            <para>
                                Értéke egy szám, ami meghatározza a módosítások egy halmazát, amiben az adott objektum létrejött vagy módosult.
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>
                    Bővebb információk az OpenStreetMap wiki oldalán olvashatóak:
                    <link xlink:href="http://wiki.openstreetmap.org/wiki/Main_Page">
                        http://wiki.openstreetmap.org/wiki/Main_Page
                    </link>
                </para>
            </section>
            <section>
                <title>Példa XML kódrészletre</title>
                <para>
                    A következő XML kód Debrecen városának térképéből lett exportálva.
                    A kód az <emphasis>osm version="0.6"</emphasis> taggal kezdődik,
                    ami az OSM Editing API verzióját jelöli, amin keresztül letöltöttük az XML állományt.
                    A <emphasis>bounds</emphasis> tag tartalmazza az exportált területet behatároló
                    <emphasis>minlat</emphasis>, <emphasis>minlon</emphasis>, <emphasis>maxlat</emphasis>, <emphasis>maxlon</emphasis> értékeket.
                    <programlisting language="xml">
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<osm version="0.6" generator="CGImap 0.3.3 (12932 thorn-01.openstreetmap.org)" copyright="OpenStreetMap and contributors" attribution="http://www.openstreetmap.org/copyright" license="http://opendatacommons.org/licenses/odbl/1-0/">
 <bounds minlat="47.4811000" minlon="21.5076000" maxlat="47.5845000" maxlon="21.7771000"/>
]]>
                    </programlisting>
                </para>
                <para>
                    Az XML állományban garantáltan elől szerepelnek a <emphasis>csomópont</emphasis> típusú elemek,
                    utánuk jönnek az <emphasis>út</emphasis> típusú elemek,
                    majd végül a <emphasis>kapcsolat</emphasis> típusú elemek zárják a sort.
                    Viszont az nincs garantálva, hogy minden elemnek pozitív id-ja van, vagy hogy id szerint rendezve vannak
                    (bővebben lásd:
                    <link xlink:href="http://wiki.openstreetmap.org/wiki/OSM_XML">
                        http://wiki.openstreetmap.org/wiki/OSM_XML
                    </link>).
                </para>
                <para>
                    Egy adott térkép adatállományában <emphasis>csomópont</emphasis> típusból van a legtöbb és ezeknek van a legfontosabb szerepe,
                    mivel csak itt vannak a földrajzi koordináták megadva.
                    Példánkban szerepelnek olyan csomópontok, amiknek címkei is vannak,
                    így ezeknek a csomópontoknak önmagukban is van jelentésük,
                    mint például egy iskola, templom vagy internet kávézó.
                    Címkék nélküli csomópontok általában egy út vagy kapcsolat részeként kapnak értelmet.
                    Megfigyelhető, hogy számos egyéb információt is tartalmazhatnak a címkék
                    (a címkékről bővebben lásd:
                    <link xlink:href="http://taginfo.openstreetmap.org">
                        http://taginfo.openstreetmap.org
                    </link>).
                    <programlisting language="xml">
<![CDATA[
 <node id="26754899" visible="true" version="10" changeset="22677330" timestamp="2014-06-01T17:02:36Z" user="Kolesár" uid="170666" lat="47.5525471" lon="21.6205428"/>
 <node id="26754891" visible="true" version="4" changeset="9718270" timestamp="2011-11-02T00:21:45Z" user="BáthoryPéter" uid="408450" lat="47.5612237" lon="21.6230840"/>
...
 <node id="2460128494" visible="true" version="2" changeset="22853651" timestamp="2014-06-10T16:22:42Z" user="neosystem100" uid="2116499" lat="47.5343657" lon="21.6255522">
  <tag k="addr:city" v="Debrecen"/>
  <tag k="addr:housenumber" v="4"/>
  <tag k="addr:postcode" v="4026"/>
  <tag k="addr:street" v="Péterfia utca"/>
  <tag k="amenity" v="school"/>
  <tag k="name" v="Computer School Debrecen"/>
  <tag k="phone" v="0652/533-328"/>
 </node>
...
 <node id="3088739774" visible="true" version="2" changeset="25673049" timestamp="2014-09-25T20:18:44Z" user="ImreSamu" uid="996303" lat="47.5497190" lon="21.6161230">
  <tag k="addr:city" v="Debrecen"/>
  <tag k="addr:housenumber" v="25"/>
  <tag k="addr:street" v="Bolyai utca"/>
  <tag k="amenity" v="place_of_worship"/>
  <tag k="denomination" v="protestant"/>
  <tag k="name" v="Nagyerdei Reformatus templom"/>
  <tag k="religion" v="christian"/>
  <tag k="website" v="www.refnagyerdo.hu"/>
  <tag k="wheelchair" v="yes"/>
 </node>
...
 <node id="2910768733" visible="true" version="1" changeset="22868114" timestamp="2014-06-11T10:03:45Z" user="DonTomika" uid="1336266" lat="47.5294086" lon="21.6276621">
  <tag k="addr:city" v="Debrecen"/>
  <tag k="addr:country" v="HU"/>
  <tag k="addr:housenumber" v="8"/>
  <tag k="addr:postcode" v="4024"/>
  <tag k="addr:street" v="Kossuth utca"/>
  <tag k="email" v="info.debicafe@gmail.com"/>
  <tag k="fax" v="+36 52 998 077"/>
  <tag k="internet_access" v="terminal"/>
  <tag k="internet_access:fee" v="yes"/>
  <tag k="name" v="Internet Cafe"/>
  <tag k="opening_hours" v="Mo-Fr 07:00-24:00, Sa-Su 09:00-24:00"/>
  <tag k="operator" v="Net 2000 Kft"/>
  <tag k="phone" v="+36 70 942 01 84"/>
  <tag k="service:computer" v="yes"/>
  <tag k="service:copy" v="yes"/>
  <tag k="service:print" v="yes"/>
  <tag k="service:scan" v="yes"/>
  <tag k="shop" v="copyshop"/>
  <tag k="website" v="http://www.dcafe.hu/"/>
 </node>
 ]]>
                    </programlisting>
                </para>
                <para>
                    Az <emphasis>út</emphasis> típusok alkotják az állományban a következő blokkot.
                    Az út típusú elemeknek önmagukban nincs földrajzi koordinátái,
                    viszont tartalmazzák az őket alkotó csomópontok <emphasis>id</emphasis> referenciáit, ami alapján kirajzolódnak.
                    A <emphasis>k="highway"</emphasis> címke kulcs tagja jelöli,
                    hogy ez esetben egy konkrét utcáról van szó, amin közlekedni lehet.
                    Más esetekben az utak jelölhetik például egy épület körvonalait.
                    <programlisting language="xml">
<![CDATA[
 <way id="4383938" visible="true" version="2" changeset="3678050" timestamp="2010-01-21T20:36:49Z" user="CarstenG" uid="72700">
  <nd ref="26754874"/>
  <nd ref="26754875"/>
  <nd ref="26754877"/>
  <nd ref="26754878"/>
  <nd ref="26754880"/>
  <nd ref="26754881"/>
  <nd ref="26754882"/>
  <tag k="highway" v="residential"/>
  <tag k="name" v="Oláh Gábor utca"/>
 </way>
...
 <way id="304275917" visible="true" version="1" changeset="25566629" timestamp="2014-09-20T19:41:16Z" user="ImreSamu" uid="996303">
  <nd ref="3088072849"/>
  <nd ref="1971681657"/>
  <nd ref="1971681646"/>
  ...
  <nd ref="3088072896"/>
  <nd ref="3088072897"/>
  <nd ref="3088072849"/>
  <tag k="building" v="commercial"/>
 </way>
 ]]>
                    </programlisting>
                </para>
                <para>
                    Az utolsó kategória a <emphasis>kapcsolat</emphasis> típusok blokkja.
                    Egy kapcsolat tartalmazza csomópontok és utak referenciáit és szerepüket.
                    Első példa kapcsolatra a 354-es főút, ami csak út típusú tagokat (<emphasis>member type="way"</emphasis>) tartalmaz.
                    Látható, hogy a <emphasis>role</emphasis> (szerep) mező üresen is hagyható.
                    Másik példában egy térséget határoznak meg az utak.
                    A kapcsolatok közlekedési szabályokat is le tudnak írni, erre példa a <emphasis>only_right_turn</emphasis> értékkel szereplő címke,
                    ami két út és az őket összekötő csomópontban megadja, hogy csak jobbra szabad fordulni.
                    Következő jellegzetes példa, amire egy kapcsolat használható, az a buszjáratok útvonalainak megadása,
                    felsorolva a megállókat, mint csomópontok, és az őket összekötő utakat.
                    Az utolsó példában a kapcsolat egy tavat határoz meg két út segítségével.
                    <programlisting language="xml">
<![CDATA[
 <relation id="23104" visible="true" version="8" changeset="22068566" timestamp="2014-05-01T17:22:38Z" user="akosbarta" uid="1731170">
  <member type="way" ref="202670924" role=""/>
  <member type="way" ref="185521439" role=""/>
  <member type="way" ref="25702600" role=""/>
  <member type="way" ref="25702638" role=""/>
  <member type="way" ref="25702640" role=""/>
  <member type="way" ref="27743398" role=""/>
  <member type="way" ref="278615091" role=""/>
  <tag k="ref" v="354"/>
  <tag k="route" v="road"/>
  <tag k="type" v="route"/>
 </relation>
...
 <relation id="1599036" visible="true" version="3" changeset="14625237" timestamp="2013-01-12T17:58:42Z" user="Domcsi" uid="57628">
  <member type="way" ref="57881620" role="outer"/>
  <member type="way" ref="57878271" role="outer"/>
  <member type="way" ref="57875799" role="outer"/>
  <member type="way" ref="57877593" role="outer"/>
  <member type="way" ref="57873858" role="outer"/>
  <member type="way" ref="57877282" role="outer"/>
  <member type="way" ref="57880871" role="outer"/>
  <member type="way" ref="57875464" role="outer"/>
  <member type="way" ref="57877408" role="outer"/>
  <member type="way" ref="57877602" role="outer"/>
  <member type="way" ref="57875930" role="outer"/>
  <member type="way" ref="57879667" role="outer"/>
  <member type="way" ref="57873849" role="outer"/>
  <member type="way" ref="57881486" role="outer"/>
  <member type="way" ref="57874107" role="outer"/>
  <member type="way" ref="57875673" role="outer"/>
  <member type="way" ref="57879417" role="outer"/>
  <member type="way" ref="57878554" role="outer"/>
  <member type="way" ref="57882140" role="outer"/>
  <member type="node" ref="26757724" role="admin_centre"/>
  <tag k="admin_level" v="7"/>
  <tag k="boundary" v="administrative"/>
  <tag k="name" v="Debreceni kistérség"/>
  <tag k="type" v="boundary"/>
 </relation>
...
 <relation id="1855523" visible="true" version="3" changeset="15133136" timestamp="2013-02-23T10:22:32Z" user="flaktack" uid="55843">
  <member type="way" ref="137727230" role="from"/>
  <member type="node" ref="1510346310" role="via"/>
  <member type="way" ref="137727228" role="to"/>
  <tag k="restriction" v="only_right_turn"/>
  <tag k="type" v="restriction"/>
 </relation>
...
 <relation id="2773522" visible="true" version="3" changeset="15985713" timestamp="2013-05-05T15:23:27Z" user="flaktack" uid="55843">
  <member type="node" ref="1452131578" role="stop"/>
  <member type="node" ref="2162387215" role="stop"/>
  <member type="node" ref="2162387571" role="stop"/>
  <member type="node" ref="2162387601" role="stop"/>
  <member type="node" ref="2162387254" role="stop"/>
  <member type="node" ref="1970902820" role="stop"/>
  <member type="node" ref="1970902805" role="stop"/>
  <member type="node" ref="1970902808" role="stop"/>
  <member type="node" ref="1970902813" role="stop"/>
  <member type="node" ref="1970902804" role="stop"/>
  <member type="node" ref="1970881207" role="stop"/>
  <member type="way" ref="206375983" role=""/>
  <member type="way" ref="24573990" role=""/>
  <member type="way" ref="27826168" role=""/>
  <member type="way" ref="206376116" role=""/>
  <member type="way" ref="27826167" role=""/>
  <member type="way" ref="120180403" role=""/>
  <member type="way" ref="206375970" role=""/>
  <member type="way" ref="24427384" role=""/>
  <member type="way" ref="206375974" role=""/>
  <member type="way" ref="206804834" role=""/>
  <member type="way" ref="206804829" role=""/>
  <member type="way" ref="206804840" role=""/>
  <tag k="from" v="Nagyállomás"/>
  <tag k="ref" v="18"/>
  <tag k="route" v="bus"/>
  <tag k="to" v="Széna tér"/>
  <tag k="type" v="route"/>
 </relation>
...
 <relation id="3898165" visible="true" version="1" changeset="24228315" timestamp="2014-07-18T19:59:18Z" user="vakulya" uid="1559158">
  <member type="way" ref="293340659" role="outer"/>
  <member type="way" ref="293340658" role="inner"/>
  <tag k="natural" v="water"/>
  <tag k="type" v="multipolygon"/>
  <tag k="water" v="lake"/>
 </relation>
]]>
                    </programlisting>
                </para>
                <para>
                    Véleményem szerint meglepő, hogy milyen részletességgel van jelen ennyi adat kis városunkról.
                </para>
            </section>
            <section>
                <title>OSM szoftverek</title>
                <para>
                    Számos szoftver létezik ami az OSM térképeit és szolgáltatásait használja.
                    Ezek közül a legfontosabbak a szerkesztő szoftverek, útválasztó szoftverek, renderelő szoftverek,
                    importáló és exportáló szoftverek. Az asztali szoftverek egy listája az alábbi linken található:
                    <link xlink:href="http://wiki.openstreetmap.org/wiki/Software/Desktop">
                        http://wiki.openstreetmap.org/wiki/Software/Desktop
                    </link>.
                    Mi ezek közül a C++-os Osmium keretrendszert fogjuk használni
                    (<link xlink:href="http://osmcode.org/libosmium">http://osmcode.org/libosmium</link>).
                </para>
            </section>
            <section>
                <title>Osmium Library</title>
                <para>
                    Az Osmium könyvtár legújabb verziója elérhető a projekt GitHub tárolójából:
                    <link xlink:href="https://github.com/osmcode/libosmium">
                        https://github.com/osmcode/libosmium
                    </link>.
                    A libosmium képes a legtöbb OSM adatformátumot kezelni, mind XML, mind PBF formátumban.
                    A beolvasott adatokat a memóriában, <emphasis>osmium::memory::Buffer</emphasis>-ben tárolja,
                    amihez a <emphasis>osmium::handler::Handler</emphasis> interfészen keresztül bejárást biztosít.
                    Ez a módszer a Visitor design pattern elveit követi, ami alapján az algoritmus elkülönül az objektum struktúra elemeitől.
                </para>
                <para>
                    Licenc szempontjából a libosmiumnak nagyon szabadvonalú licence van, a Boost Software License
                    (<link xlink:href="http://www.boost.org/LICENSE_1_0.txt">
                        http://www.boost.org/LICENSE_1_0.txt
                    </link>).
                </para>
                <section>
                    <title>Telepítés</title>
                    <para>
                        Telepítéshez követjük a projekt oldalán található lépéseket,
                        amiket a <emphasis>README.md</emphasis> generál.
                        Az alábbi paranccsal tudjuk leklónozni a repót:
                        <screen>
<![CDATA[
andras@G53SW:~/Programs$ git clone https://github.com/osmcode/libosmium.git
]]>
                        </screen>
                        Az így létrejött mappa az alábbiakat tartalmazza:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    include
                                </para>
                                <para>
                                    Itt találhatóak a szükséges header állományok.
                                    Ezek felhasználásával tudjuk saját alkalmazásunkban használni az Osmium könyvtárat.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    examples
                                </para>
                                <para>
                                    Pár példa arra, hogyan tudjuk használni az Osmium könyvtárat.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    doc
                                </para>
                                <para>
                                    Ebben a mappában vannak a szükséges állományok a dokumentáció előállítására.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    cmake
                                </para>
                                <para>
                                    CMake modulok mappája, amik segítségével tudunk létrehozni cmake-es projektet,
                                    ami libosmium-ot használ (FindOsmium.cmake).
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                    <para>
                        A libosmium számos C++11-es feature-t használ, ezért egy modern fordítóra van szükségünk (minimum GCC 4.8).
                        Továbbá számos másik könyvtártól is függ a libosmium, amiket fel kell telepíteni használat előtt.
                        A fontos függőségek a következőek:
                        CMake és Make, Google Protocol Buffers, OSMPBF, Expat, Zlib, bz2lib.
                        Ezeken kívül érdemes az opcionális függőségeket is telepíteni:
                        Google Sparsehash, Boost, GDAL, GEOS, Proj.4, Doxygen.
                        A legújabb Ubuntu linux disztribúció (15.04) alatt ezeknek a telepítése a következő paranccsal hajtható végre
                        (a telepítéshez root jogosultságra van szükség):
                        <screen>
<![CDATA[
andras@G53SW:~$ sudo apt-get install \
    cmake cmake-curses-gui make \
    libprotobuf-dev protobuf-compiler \
    libosmpbf-dev \
    libexpat1-dev \
    zlib1g-dev \
    libbz2-dev \
    libsparsehash-dev \
    libboost-all-dev \
    libgdal-dev \
    libgeos++-dev \
    libproj-dev \
    doxygen graphviz
]]>
                        </screen>
                    </para>
                    <para>
                        Az Osmium egy <emphasis>header-only</emphasis> könyvtár, ami azt jelenti, hogy nem kell lefordítani,
                        hanem csak egyszerűen be kell őket include-olni programunkba.
                        A az előbb leklónozott mappában állva a következő paranccsal bemásoljuk a header állományokat
                        a <emphasis>/usr/local/include</emphasis> mappába (a másoláshoz root jogosultságra van szükség):
                        <screen>
<![CDATA[
andras@G53SW:~/Programs/libosmium$ sudo cp -r include/osmium/ /usr/local/include/
]]>
                        </screen>
                        Adjuk ki a következő parancsot a példák és a tesztek előállításához:
                        <screen>
<![CDATA[
andras@G53SW:~/Programs/libosmium$ mkdir build
andras@G53SW:~/Programs/libosmium$ cd build
andras@G53SW:~/Programs/libosmium/build$ cmake ..
andras@G53SW:~/Programs/libosmium/build$ make
]]>
                        </screen>
                        A cmake konfiguráció módosításához használhatjuk a következő parancsot,
                        ha például nem szeretnénk előállítani a teszteket:
                        <screen>
<![CDATA[
andras@G53SW:~/Programs/libosmium/build$ ccmake ..
]]>
                        </screen>
                        <figure xml:id="ccmake">
                            <title>A CMake curses interface</title>
                            <mediaobject>
                                <imageobject>
                                    <imagedata fileref="figures/ccmake.png"/>
                                </imageobject>
                            </mediaobject>
                        </figure>
                        Végezetül a dokumentáció előállítása:
                        <screen>
<![CDATA[
andras@G53SW:~/Programs/libosmium/build$ make doc
]]>
                        </screen>
                    </para>
                </section>
            </section>
            <section>
                <title>Saját libosmium példaprogramok</title>
                <para>
                    A robotautó platform elkészítését megelőző kutatási fázisban fontos lépésnek bizonyult
                    a választott könyvtárral való ismerkedés néhány kisebb példaprogramon keresztül,
                    amik rendre a könyvtár rugalmasságát és sokoldalúságát mérték fel konkrét feladatok megoldásában.
                </para>
                <section>
                    <title>Utcák kilistázása</title>
                    <para>
                        Az első példaprogram az OpenStreetMap oldaláról exportált Debrecen térképről listázza ki az utcákat.
                        A tejes program leklónozható a következő git repóból:
                        <link xlink:href="https://bitbucket.org/mamenyaka/utcak">
                            https://bitbucket.org/mamenyaka/utcak
                        </link>
                    </para>
                    <para>
                        Az utcak.cpp forrása:
                        <programlisting language="C++">
                            <textobject>
                                <textdata fileref="src/utcak/utcak.cpp"/>
                            </textobject>
                        </programlisting>
                    </para>
                    <para>
                        A program berántja a parancssori argumentumként kapott OSM állományt (lehet XML vagy PBF)
                        egy <emphasis>osmium::memory::Buffer</emphasis>-be:
                        <programlisting language="C++">
<![CDATA[
osmium::memory::Buffer buffer = osmium::io::read_file(argv[1]);
]]>
                        </programlisting>
                    </para>
                    <para>
                        A <emphasis>buffer</emphasis>-ben lévő OSM objektumokat az alábbi C++11-es <emphasis>range-based for</emphasis> ciklussal járhatjuk be:
                        <programlisting language="C++">
<![CDATA[
for (const auto& item : buffer)
]]>
                        </programlisting>
                        Az elemeket konstans referenciaként érjük el,
                        a C++11-es <emphasis>auto</emphasis> specifikátor segítségével az <emphasis>item</emphasis> típusa automatikusan ki lesz következtetve
                        (jelen esetben <emphasis>osmium::OSMEntity</emphasis>, ami az alap absztrakt ősosztálya az OSM objektumoknak).
                        <figure xml:id="OSMEntity">
                            <title>Az <emphasis>osmium::OSMEntity</emphasis> öröklődési diagramja a dokumentáció szerint</title>
                            <mediaobject>
                                <imageobject>
                                    <imagedata fileref="figures/OSMEntity.png"/>
                                </imageobject>
                            </mediaobject>
                        </figure>
                    </para>
                    <para>
                        Ez a feltétel biztosítja számunka, hogy csak út típusú <emphasis>item</emphasis>-ekkel dolgozunk.
                        <programlisting language="C++">
<![CDATA[
if (item.type() == osmium::item_type::way)
]]>
                        </programlisting>
                        Így bátran downcast-olhatjuk az <emphasis>item</emphasis> referenciát,
                        <emphasis>osmium::OSMEntity</emphasis> típusról <emphasis>osmium::Way</emphasis> típusra,
                        mivel az <emphasis>osmium::Way</emphasis> osztály leszármazottja az <emphasis>osmium::OSMEntity</emphasis> absztrakt ősosztálynak.
                        <programlisting language="C++">
<![CDATA[
const osmium::Way& way = static_cast<const osmium::Way&>(item);
]]>
                        </programlisting>
                    </para>
                    <para>
                        A <emphasis>get_value_by_key</emphasis> függvénnyel az út címkéinek listájából lekérdezi
                        a paraméterként megadott kulcshoz tartozó értéket.
                        Ha nem létezik az adott kulcs a címkék listájában, akkor <emphasis>nullptr</emphasis>-t kapunk visszatérési értékként.
                        A <emphasis>"name"</emphasis> kulcs esetlegesen az utca nevét tartalmazza, a <emphasis>"highway"</emphasis> pedig az út típusát.
                        <programlisting language="C++">
<![CDATA[
const char* name = way.get_value_by_key("name");
const char* highway = way.get_value_by_key("highway");
]]>
                        </programlisting>
                    </para>
                    <para>
                        Ha mindkét érték létezik, azaz nem nullpointerek,
                        akkor kiíratjuk a standard kimenetre az utca nevét és a felhasználót,
                        aki felvitte vagy utoljára módosította az utat az adatbázisban.
                        <programlisting language="C++">
<![CDATA[
if (name && highway)
  std::cout << "[" << way.user() << "] " << name << std::endl;
]]>
                        </programlisting>
                    </para>
                    <para>
                        A példaprogram fordításához létrehozunk egy CMake-es projektet.
                        A libosmium biztosítja számunkra a
                        <emphasis>FindOsmium.cmake</emphasis> és <emphasis>FindOSMPBF.cmake</emphasis> modulokat,
                        amik a <emphasis>cmake</emphasis> mappában találhatóak.
                        Ezek segítségével találja meg a cmake a libosmium header állományait és
                        állítja be a megadott komponensekhez a szükséges könyvtárakat.
                        Az Osmium <emphasis>io</emphasis> komponenséhez szükséges könyvtárak:
                        OSMPBF, Protobuf, ZLIB, Threads, EXPAT, BZip2.
                        Az OSMPBF könyvtár megtalálásában a <emphasis>FindOSMPBF.cmake</emphasis> modul segít.
                    </para>
                    <para>
                        A <emphasis>CMakeLists.txt</emphasis> állomány a következő:
                        <programlisting language="make">
                            <textobject>
                                <textdata fileref="src/utcak/CMakeLists.txt"/>
                            </textobject>
                        </programlisting>
                    </para>
                    <para>
                        Fordítás:
                        <screen>
<![CDATA[
andras@G53SW:~/Programs/utcak$ mkdir build
andras@G53SW:~/Programs/utcak$ cd build/
andras@G53SW:~/Programs/utcak/build$ cmake ..
-- The C compiler identification is GNU 4.9.2
-- The CXX compiler identification is GNU 4.9.2
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Found OSMIUM: /usr/local/include  
-- Found OSMPBF: /usr/lib/libosmpbf.a  
-- Looking for include file pthread.h
-- Looking for include file pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - not found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE  
-- Found PROTOBUF: /usr/lib/x86_64-linux-gnu/libprotobuf.so  
-- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version "1.2.8") 
-- Found EXPAT: /usr/lib/x86_64-linux-gnu/libexpat.so (found version "2.1.0") 
-- Found BZip2: /usr/lib/x86_64-linux-gnu/libbz2.so (found version "1.0.6") 
-- Looking for BZ2_bzCompressInit in /usr/lib/x86_64-linux-gnu/libbz2.so
-- Looking for BZ2_bzCompressInit in /usr/lib/x86_64-linux-gnu/libbz2.so - found
-- Configuring done
-- Generating done
-- Build files have been written to: /home/andras/Programs/utcak/build
andras@G53SW:~/Programs/utcak/build$ make
Scanning dependencies of target utcak
[100%] Building CXX object CMakeFiles/utcak.dir/utcak.cpp.o
Linking CXX executable utcak
[100%] Built target utcak
]]>
                        </screen>
                    </para>
                    <para>
                        Futtatás:
                        <screen>
<![CDATA[
andras@G53SW:~/Programs/utcak/build$ ./utcak ~/debrecen.osm
[CarstenG] Oláh Gábor utca (residential)
[madar] Martinovics utca (residential)
[SzPaula] Besze János utca (residential)
[DonTomika] Simonyi utca (residential)
[DonTomika] Doberdó utca (residential)
[papesz] Bethlen utca (residential)
[Kolesár] Békessy Béla utca (residential)
[DonTomika] Nyíl utca (primary)
...
]]>
                        </screen>
                    </para>
                </section>
                <section>
                    <title>Buszjáratok menetrendje</title>
                    <para>
                        A második példaprogram Debrecen buszjáratainak menetrendjét írja ki,
                        buszjáratonként a megállók nevét, földrajzi koordinátáit és a felhasználó nevét,
                        aki felvitte vagy utoljára módosította az objektumot.
                        A tejes program leklónozható a következő git repóból:
                        <link xlink:href="https://bitbucket.org/mamenyaka/buszjarat">
                            https://bitbucket.org/mamenyaka/buszjarat
                        </link>
                    </para>
                    <para>
                        Az buszjarat.cpp forrása:
                        <programlisting language="C++">
                            <textobject>
                                <textdata fileref="src/buszjarat/buszjarat.cpp"/>
                            </textobject>
                        </programlisting>
                    </para>
                    <para>
                        Az utcákat kilistázó programhoz hasonlóan bejárjuk a <emphasis>buffer</emphasis> tartalmát,
                        és ha kapcsolat típussal találkozunk, akkor megvizsgáljuk,
                        hogy a <emphasis>route</emphasis> kulcsnak mi az értéke.
                        Ha az értéke "bus", akkor ez egy buszjárat.
                        <programlisting language="C++">
<![CDATA[
const char* route = relation.get_value_by_key("route", "");
if (!strncmp(route, "bus", 3))
{
...
}
]]>
                        </programlisting>
                    </para>
                    <para>
                        Nem minden kapcsolatnak van <emphasis>route</emphasis> kulcsú tagja.
                        Ha nincs, akkor <emphasis>nullptr</emphasis>-t kapunk vissza és
                        így az összehasonlításban elszállna a programunk.
                        Hogy ezt elkerüljük és a kódunk is elegáns maradjon,
                        megadjuk a <emphasis>get_value_by_key</emphasis> metódusnak második paraméterként,
                        hogy mivel térjen vissza, ha nem találta meg a keresett kulcsot.
                        <programlisting language="C++">
<![CDATA[
const char* get_value_by_key(const char* key, const char* default_value = nullptr) const noexcept {
  auto result = std::find_if(cbegin(), cend(), [key](const Tag& tag) {
    return !strcmp(tag.key(), key);
  });
  if (result == cend()) {
    return default_value;
  } else {
    return result->value();
  }
}
]]>
                        </programlisting>
                    </para>
                    <para>
                        A program bonyolultságát az adja,
                        hogy bár a <emphasis>relation</emphasis> elemeihez könnyedén hozzáférhetünk
                        a <emphasis>members</emphasis> metóduson keresztül,
                        de azok <emphasis>RelationMember</emphasis> típusúak és így csak alap információkat
                        (id, típus, szerep) nyújt az elemről, így magát az elemet nem érjük el.
                        <programlisting language="C++">
<![CDATA[
for (const auto& member : relation.members())
{
  if (member.type() == osmium::item_type::node &&
      !strncmp(member.role(), "stop", 4))
...
}
]]>
                        </programlisting>
                    </para>
                    <para>
                        Mivel szükségünk van a megállók koordinátáira, ezért nincs más választásunk,
                        mint eltárolni minden csomópont helyét a <emphasis>buffer</emphasis>-ben.
                        Esetünkben a <emphasis>osmium::unsigned_object_id_type</emphasis> (csomópont azonosító id) lesz a kulcs,
                        az érték pedig a <emphasis>buffer</emphasis>-ben mért <emphasis>size_t</emphasis> offset (eltolás).
                        A csomópont id-k, nagy számok lévén, ritkán töltik fel a táblázatot, amiben tároljuk őket.
                        Ennek támogatására használjuk a Google <emphasis>sparsetable</emphasis> adatstruktúrát,
                        ami memória-hatékonyan tárolja a hiányosan feltöltött hash táblákat.
                        Az adatstruktúra kezelését az Osmium könyvtár végzi, nekünk csak használni kell azt.
                        <programlisting language="C++">
<![CDATA[
typedef osmium::index::map::SparseMemTable<osmium::unsigned_object_id_type, size_t> offset_index_type;
]]>
                        </programlisting>
                    </para>
                    <para>
                        A táblázat feltöltésénél kihasználjuk a <emphasis>buffer</emphasis> azon tulajdonságát,
                        hogy a csomópont típusú elemek találhatóak a tároló legelején,
                        tehát megelőzik a kapcsolat típusú elemeket.
                        <programlisting language="C++">
<![CDATA[
offset_index_type node_index;
size_t offset = 0;

for (const auto& item : buffer)
{
  if (item.type() == osmium::item_type::node)
  {
    const osmium::Node& node = static_cast<const osmium::Node&>(item);

    node_index.set(node.positive_id(), m_offset);
    offset += node.byte_size();
  }
...
}
]]>
                        </programlisting>
                    </para>
                    <para>
                        Végezetül előszedjük a <emphasis>buffer</emphasis>-ből a <emphasis>member</emphasis> nyújtotta id alapján
                        a megfelelő csomópontot.
                        Előfordulhat, hogy az egyes buszjáratoknak a térképen kívül eső buszmegállói vannak,
                        ami azt eredményezi, hogy bár a buszjárat kapcsolatban szerepel tagként a csomópont referenciája,
                        de a csomópontok közt nincs maga a csomópont.
                        Ekkor, a <emphasis>SparseMemTable::get</emphasis> metódusa std::runtime_error kivételt dob,
                        ha nem található a keresett elem, amit a programunkkal elkapunk.
                        Egy lehetséges megoldás, hogy nagyobb területű térképet exportálunk az adatbázisból.
                        <programlisting language="C++">
<![CDATA[
try
{
  const size_t offset = node_index.get(member.positive_ref());
  const osmium::Node& node = buffer.get<const osmium::Node>(offset);
...
}
catch (std::runtime_error& e)
{
  std::cerr << e.what() << std::endl;
}
]]>
                        </programlisting>
                    </para>
                    <para>
                        Fordítás:
                        <screen>
<![CDATA[
andras@G53SW:~/Programs/buszjarat$ mkdir build
andras@G53SW:~/Programs/buszjarat$ cd build/
andras@G53SW:~/Programs/buszjarat/build$ cmake ..
-- The C compiler identification is GNU 4.9.2
-- The CXX compiler identification is GNU 4.9.2
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Found OSMIUM: /usr/local/include  
-- Found OSMPBF: /usr/lib/libosmpbf.a  
-- Looking for include file pthread.h
-- Looking for include file pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - not found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE  
-- Found PROTOBUF: /usr/lib/x86_64-linux-gnu/libprotobuf.so  
-- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version "1.2.8") 
-- Found EXPAT: /usr/lib/x86_64-linux-gnu/libexpat.so (found version "2.1.0") 
-- Found BZip2: /usr/lib/x86_64-linux-gnu/libbz2.so (found version "1.0.6") 
-- Looking for BZ2_bzCompressInit in /usr/lib/x86_64-linux-gnu/libbz2.so
-- Looking for BZ2_bzCompressInit in /usr/lib/x86_64-linux-gnu/libbz2.so - found
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of google::sparsetable<int>::size_type
-- Check size of google::sparsetable<int>::size_type - done
-- Configuring done
-- Generating done
-- Build files have been written to: /home/andras/Programs/buszjarat/build
andras@G53SW:~/Programs/buszjarat/build$ make
Scanning dependencies of target buszjarat
[100%] Building CXX object CMakeFiles/buszjarat.dir/buszjarat.cpp.o
Linking CXX executable buszjarat
[100%] Built target buszjarat
]]>
                        </screen>
                    </para>
                    <para>
                        Futtatás:
                        <screen>
<![CDATA[
andras@G53SW:~/Programs/buszjarat/build$ ./buszjarat ~/debrecen.osm 
[Zotya] 10 (IT Services Hungary Kft. -> Nagyállomás, toronyház)
  [flaktack] IT Services Hungary Kft. (21.5883,47.5559)
  [flaktack] Vezér utca (21.5978,47.5557)
  [flaktack] Nyék utca (21.6009,47.5556)
  [flaktack] Árpád Vezér Általános Iskola (21.6075,47.5561)
  [flaktack] Doberdó utca (21.611,47.5572)
  [flaktack] Sportkollégium (21.6156,47.5568)
  [BettiD] Auguszta (21.6233,47.5612)
  [flaktack] Pallagi út (21.6305,47.5609)
  [flaktack] Szociális Otthon (21.6305,47.5568)
  [flaktack] Klinikák (21.6282,47.5562)
  [BettiD] Egyetem tér (21.6215,47.5506)
  [BettiD] Nagy Lajos Király tér (21.6217,47.5456)
  [wheelmap_visitor] Egyetem sugárút (21.6218,47.5409)
  [wheelmap_visitor] Honvéd utca (21.6219,47.5372)
  [flaktack] Jókai utca (21.6205,47.5327)
  [flaktack] Pásti utca (21.6179,47.5303)
  [DonTomika] Segner tér (21.6127,47.5289)
  [DonTomika] Helyközi autóbusz-állomás (21.6188,47.5265)
  [flaktack] Kistemplom (21.6255,47.5283)
  [flaktack] Petőfi tér (21.6267,47.523)
  [flaktack] Nagyállomás, toronyház (21.6271,47.5211)

...
]]>
                        </screen>
                    </para>
                </section>
            </section>
            <section>
                <title>A Robotautó Világbajnokság platformja</title>
                <para>
                    Az alábbi fejezet részei a Robotautó Világbajnokság szoftverkövetelmény specifikáció (SRS)
                    dokumentum <citation>RCEMU</citation> alapján íródtak.
                </para>
                <section>
                    <title>Célok</title>
                    <para>
                        A Robotautó Világbajnokság egy olyan kutatási platform,
                        ami a robotautók és az intelligens város kapcsolatát vizsgálja.
                    </para>
                    <para>
                        A kezdeményezés célközönsége rövid távon az egyetemi oktatás és kutatás.
                        Hosszú távon az autóipar szereplőit célozzuk meg,
                        egy egységes platformot biztosítva a jövőbeli robotautók forgalomirányító algoritmusának
                        a fejlesztésére és tesztelésére.
                    </para>
                </section>
                <section>
                    <title>A platform koncepciója</title>
                    <para>
                        A platform lelke a Robocar City Emulator, ami a várost és a forgalmat szimulálja.
                        Jelen esetben a város térképét (Map) az OpenStreetMap biztosítja.
                        Az intelligens város (City) adatfelhőjét a forgalom megfigyelésével töltjük fel.
                        Ez a megfigyelés történhet automatikusan (ASA) vagy kézi annotálással (HSA).
                        A versenyben részt vevő forgalomirányító algoritmusok (The competition) vezérlik
                        a városban közlekedő robotautókat.
                        A győztes algoritmust a szimulációs eredmények (Results) alapján hirdetjük ki.
                        Az emulátorhoz kapcsolódó valósidejű vagy visszajátszó megjelenítők (Monitors) a szimuláció követését
                        segítik.
                    </para>
                    <figure xml:id="Tetris-terv">
                        <title>A projekt "Tetris-terve"</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="figures/tetris_plan2_400x.png" scale="80"/>
                            </imageobject>
                        </mediaobject>
                    </figure>
                </section>
                <section>
                    <title>Az emulátor követelményei</title>
                    <para>
                        A valóságban az autók útvonaltervezését a járműben található eszköz végzi,
                        nekünk viszont egyetlen szoftveren belül kell ugyanezt nyújtani minden egyes robotautó számára.
                        Az autók nagy számát tekintve (akár 10<superscript>6</superscript>), ez egy nehéz feladat.
                    </para>
                    <para>
                        A fejlesztés katalizálása miatt enyhítettünk azon a követelményen,
                        hogy minden robotautót egyetlen forgalomirányító algoritmusnak kell kezelnie.
                        Az enyhített követelmény alapján két járművet különböztetünk meg az emulátorban:
                        a rutin autókat, amik egy előre meghatározott útvonalon közlekednek,
                        és az okos autókat, amiket a forgalomirányító algoritmus irányít.
                    </para>
                    <para>
                        Az előzetes követelmények a következőek:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    A bemenetként kapott OSM térképből gráfot kell építeni.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Az emulátor képes legyen akár 10<superscript>6</superscript> autót is szimulálni.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </section>
            </section>
        </section>
        <section>
            <title>Justina, a saját fejlesztés</title>
            <para>
                A kutatási tervben <citation>Terv</citation> a Jusztina kódnévvel ellátott feladat
                megoldására készített saját fejlesztésem a Justina emulátor,
                ami egy gyors, eldobható, evolúciós prototípus.
                A fejlesztés magába foglalja az emulátor tervezését és implementálását.
                A kutatási fázisból származó követelményekből kifolyólag,
                a prototípus használja az OpenStreetMap térképeit és azok feldolgozásához szükséges Osmium könyvtárat.
            </para>
            <para>
                Az emulátor jellemzői:
                <itemizedlist>
                    <listitem>
                        <para>
                            Az emulátor nyílt forrású, GNU GPL v3 licencű.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            A kapcsolódó dokumentálás nyelve DocBook XML 5.1,
                            amit a jelenlegi dolgozat képvisel.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Az emulátor implementációs nyelve C++11,
                            a megjelenítő komponens a Qt5 keretrendszer felhasználásával készült.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                A szoftver magába foglalja a Robocar City Emulator-t és a Monitor-t is,
                és teljes egészében elérhető a következő git tárolóból:
                <link xlink:href="https://bitbucket.org/mamenyaka/mapview">
                    https://bitbucket.org/mamenyaka/mapview
                </link>
            </para>
            <section>
                <title>Módszertan, a szoftverfolyamat tervezése</title>
                <para>
                    Az emulátor fejlesztése az agilis szoftverfejlesztés módszertan szerint zajlott.
                    A módszertan elvei vázolva a következőek:
                    <itemizedlist>
                        <listitem>
                            <para>
                                Előtérbe helyezi magát a szoftvert, háttérbe szorítva a dokumentálást.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Az előrehaladás mértékegysége a jól működő szoftver.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Fenntartja a követelmények változásának lehetőségét.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                A módszertanhoz kapcsolódó "Release early, release often" filozófia
                                kihangsúlyozza a szoftver korai és gyakori nyilvánosságra hozását,
                                ami által a fejlesztők és a felhasználók közt szoros visszajelzés-alapú hurok alakul ki.
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>
                    Az emulátor követelmény specifikációja gyakran változott,
                    ami kihatással volt magára a szoftverre is,
                    viszont a jól megválasztott módszertan mellett
                    nem okozott gondot ezeknek a változásoknak a folyamatos beépítése.
                </para>
                <para>
                    A Robocar City Emulator szoftver dokumentálása,
                    követve az agilis módszertant,
                    automatikusan készült a forráskóddal párhuzamosan,
                    hiszen a használt <emphasis>doxygen</emphasis> eszköz egyenesen
                    a forráskódból generálja a dokumentációt
                    (részletesebben a Doxygen-ről lásd:
                    <link xlink:href="www.doxygen.org">www.doxygen.org</link>).
                    <figure xml:id="doc">
                        <title>A generált dokumentáció <emphasis>Car</emphasis> osztálya</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="figures/doc.png"/>
                            </imageobject>
                        </mediaobject>
                    </figure>
                </para>
            </section>
            <section>
                <title>Tervezés</title>
                <para>
                    A tervezett emulátor fő koncepciója a robotautók nagy számára helyezte a hangsúlyt.
                    Ahhoz, hogy akár 10<superscript>6</superscript> nagyságrendű számú autó
                    bolyongjon a térképen valós időben,
                    és ezt mind meg is lehessen jeleníteni a Monitor programban,
                    szükség volt egy olyan platformra, aminek a komponensei egy egységet alkotnak.
                    A hagyományos socket alapú kommunikáció az emulátor és a hozzá kapcsolódó forgalomirányító ágensek 
                    vagy a megjelenítő programok közt megvalósíthatatlannak bizonyult a számítások alapján.
                    Ha 10<superscript>6</superscript> autót feltételezünk,
                    és minden autó rendelkezik (x, y) GPS koordinátával, amik 4 bájtos lebegőpontos típusok,
                    és az emulátor időfelbontása 10 szimulációs lépés másodpercenként,
                    akkor eredményül az emulátor minden másodpercben
                    2*4*10<superscript>6</superscript>*10 bájt, azaz 80 MB
                    adatot kéne, hogy továbbítson a hozzá kapcsolódó entitásoknak.
                    E mellett az adatmennyiség mellett nem tartom életképesnek a socket alapú IPC-t.
                </para>
                <para>
                    Az emulátor gyors prototípus jellege miatt az egyszerű,
                    de könnyen bővíthető architektúra volt a cél,
                    ezért a további lehetséges IPC mechanizmusok, mint például az osztott memória,
                    használta nem biztosított volna nagyobb előrelépést funkcionalitás terén,
                    mivel a platform többi komponense és maga az emulátor is egy számítógépre limitált.
                </para>
                <para>
                    A felsorolt okokból kifolyólag a Justina Robocar City Emulator egy monolitikus szoftver,
                    ahol mind a térkép gráfja, a rajta közlekedő autók és a megjelenítő is egy programot alkot.
                    A routing algoritmus is része a programnak, így azt csak az egész emulátor újrafordításával lehet cserélni.
                    Ebből kifolyólag az emulátor nem az algoritmusok versenyeztetése céljából készült,
                    és nem is azt próbálja megvalósítani.
                </para>
                <para>
                    A Justina egy kutatási platform, ahol a már bizonyított forgalomirányító algoritmusokat
                    lehet tovább elemezni egy realisztikusabb szimulációs környezetben.
                    Kutatók számára az emulátor egy eszköz,
                    amivel vizsgálni lehet szimulációs számítások révén a robotautók kapcsolatát az okos várossal.
                </para>
            </section>
            <section>
                <title>Fejlesztés</title>
                <para>
                    Az útválasztó algoritmus tesztelésére a
                    Robotautó Világbajnokságból származó szituáció került implementálásra,
                    amiben a rendőr típusú robotautók üldözik a gengszter típusú robotautókat
                    a város civil robotautó forgalmában,
                </para>
                <para>
                    A bemenet is változatlanul egy város OSM térképe,
                    amiből felépítünk egy gráfot a Boost Graph Library használatával.
                </para>
                <section>
                    <title>A gráf típusa</title>
                    <para>
                        A <emphasis>graph.hpp</emphasis> forrásfájlban található a gráf deklarációja:
                        <programlisting language="C++">
<![CDATA[
# include <boost/graph/adjacency_list.hpp>

typedef boost::adjacency_list<
  boost::vecS,
  boost::vecS,
  boost::undirectedS,
  boost::property<boost::vertex_name_t, Location>,
  boost::property<boost::edge_weight_t, double>
> graph_type;
]]>
                        </programlisting>
                    </para>
                    <para>
                        A gráf szomszédossági lista alapú
                        (lásd: <link xlink:href="http://www.boost.org/doc/libs/1_58_0/libs/graph/doc/adjacency_list.html">
                            http://www.boost.org/doc/libs/1_58_0/libs/graph/doc/adjacency_list.html
                        </link>).
                    </para>
                    <para>
                        A csomópontok és élek tárolója <emphasis>std::vector</emphasis> típusú.
                        Mivel nem akarjuk módosítani a gráfot, ezáltal nem szükséges számunkra,
                        hogy a gyorsabb <emphasis>std::list</emphasis> típust válasszuk,
                        ami viszont több helyet foglal a memóriában.
                        Egy város térképének gráfja nagy méretű, ezért is ajánlott a helytakarékosabb tárolót választani.
                    </para>
                    <para>
                        A gráf irányítatlan, mivel a kezdeti szimulációs modellünkben minden út kétirányú a robotautók számára.
                        Ennek megfelelően kevesebb memóriát igényel egy irányítatlan gráf tárolása, mint egy irányított gráf.
                    </para>
                    <para>
                        A csomópontok tárolják az OSM adatokból származó koordinátákat.
                        Az élek súlyokkal rendelkeznek, ami a kezdeti modell szerint az élhez tartozó két csomópont közti távolság.
                    </para>
                </section>
                <section>
                    <title>A gráf felépítése</title>
                    <para>
                        A <emphasis>CreateGraph</emphasis> osztály foglalkozik a gráf felépítésével.
                        Kiterjeszti a <emphasis>osmium::handler::Handler</emphasis> absztrakt osztályt,
                        definiálva ezzel a használandó visszahívási (callback) metódusokat,
                        amik a Visitor pattern elvei szerint minden egyes bejárt objektumra meghívódnak.
                        <programlisting language="C++">
<![CDATA[
typedef osmium::index::map::SparseMemTable<osmium::unsigned_object_id_type, osmium::Location> nodes_type;
nodes_type nodes;

osmium::handler::NodeLocationsForWays<nodes_type> handler1(nodes);
CreateGraph handler2(graph);
osmium::apply(buffer, handler1, handler2);
]]>
                        </programlisting>
                        Az OSM <emphasis>buffer</emphasis>-t kétszer járjuk be.
                        Először feltöltjük a <emphasis>nodes</emphasis> Google sparsetable típusú tárolót,
                        ami az út típusú elemek csomópont referenciáihoz tárolja el nekünk az OSM csomópontok koordinátáit.
                        Másodszor, az út típusú elemeket bejárva építjük fel a gráfot.
                    </para>
                    <para>
                        A <emphasis>create_graph.cpp</emphasis>-ben definiált
                        <emphasis>CreateGraph::way</emphasis> metódus kapja meg egyenként a bejárt utakat,
                        majd építi fel belőlük a gráfot, kiszűrve az egyéb nem utakat és a járdákat.
                        A csomópontok beszúrását egy tábla típusú tároló támogatja,
                        ahol a kulcs az OSM csomópont id, az érték a gráf csomópont id.
                        Ez biztosítja, hogy egy csomópont csak egyszer kerüljön be a gráfba,
                        ami azért fontos, mert egy OSM csomópontot több út is tartalmazhat.
                        Ekkor a gráfban lévő csomóponthoz kapcsoljuk az újabb éleket
                        és nem pedig új csomópontokat hozunk létre a gráfban.
                    </para>
                    <para>
                        Hogy a megjelenítés helyes legyen, és hogy könnyebben tudjunk a koordinátákkal távolságot számolni,
                        ezért az OSM GPS (lon, lat) koordináták a Mercator-vetület szerint átalakítva kerülnek be a gráfba,
                        mint (x, y) koordináták.
                        <programlisting language="C++">
<![CDATA[
boost::add_vertex(Location(osmium::geom::detail::lon_to_x(node_ref.lon()),
                           osmium::geom::detail::lat_to_y(node_ref.lat())), graph);
]]>
                        </programlisting>
                    </para>
                    <para>
                        A gráf felépítése után az OSM adatokat és az Osmium könyvtárat már nem használjuk,
                        így a város megrajzolását már a gráf alapján végzi a program.
                    </para>
                </section>
                <section>
                    <title>A forgalom</title>
                    <para>
                        A térkép gráfját a <emphasis>Car</emphasis> osztály példányai népesítik be.
                        A <emphasis>car.hpp</emphasis> forrásfájlban található az osztály deklarációja:
                        <programlisting language="C++">
<![CDATA[
class Car
{
public:
  enum Type { Caught, Civil, Gangster, Cop };

  Type type;
  const double max_speed;
  Location loc;

  edge_type curr_edge;
  vertex_type entry_point;
...
};
]]>
                        </programlisting>
                        Egy robotautó lehet elkapott gengszter, civil, gengszter vagy rendőr típusú.
                        Az alap modellben minden autó a maximális sebességével közlekedik,
                        ami egyedenként eltérő is lehet.
                        A <emphasis>loc</emphasis> tagváltozó határozza meg az autó helyzetét.
                        Az autók mindig egy adott élen helyezkednek el a gráfban,
                        az irányukat egy csomópont adja meg, ami az élnek az a vége,
                        ahol az autó bejött (bejárat).
                        Az él másik csomópontja garantáltan az autó kijárata lesz,
                        amit az autó érinteni fog,
                        így a jelenlegi modellben nem fordulhatnak meg egy él közepén az autók.
                    </para>
                    <para>
                        A forgalomban résztvevő autók számát típus szerint meg lehet adni.
                        A gráf autókkal való feltöltése random történik,
                        a gráfból kiválasztunk találomra egy élt, amire egy darab robotautót helyezünk.
                        A boost biztosít egy <emphasis>random_edge</emphasis> metódust ami lassúnak bizonyult,
                        ezért a C++-os standard könyvtárból használjuk az alapértelmezett
                        Lewis, Goodman, és Miller-féle <emphasis>Minimum Standard</emphasis>
                        randomszám generátort.
                        <programlisting language="C++">
<![CDATA[
std::uniform_int_distribution<unsigned long> uni_dis(0, boost::num_edges(graph)-1);
...
const edge_type& e = *std::next(boost::edges(graph).first, uni_dis(gen));
]]>
                        </programlisting>
                        A <emphasis>boost::edges(graph)</emphasis> metódus
                        visszatérési értéke egy <emphasis>std::pair</emphasis>,
                        aminek első eleme az élek tárolójának elejére mutató iterátor.
                        Ehhez hozzáadva a generált random számunkat kapjuk meg találomra
                        a gráf egyik élét.
                    </para>
                </section>
                <section>
                    <title>A forgalomirányítás</title>
                    <para>
                        A forgalomban résztvevő robotautók nagyrésze rutin autó.
                        Ide tartoznak a civil és a gengszter típusú autók.
                        Ezek az autók random bolyonganak a városban, olyan értelemben,
                        hogy egy adott kereszteződés lehetséges útjai közül random választanak,
                        de anélkül, hogy visszafordulnának.
                        A rendőr típusú autókat egy algoritmus vezérli,
                        aminek a feladata, hogy olyan útvonalat tervezzen a rendőrautónak,
                        amivel elkapja a gengsztereket.
                        Egy gengszter akkor válik elkapottá,
                        ha a rendőr autó és a gengszter autó is ugyanazon az útvonalon van
                        és a köztük lévő távolság kevesebb, mint 10 méter.
                    </para>
                    <para>
                        A saját routing algoritmusom alapja,
                        hogy minden rendőrt a hozzá legközelebb eső gengszterhez irányítson.
                        A legelterjedtebb útvonalkereső algoritmus az A* algoritmus,
                        amit a boost is támogat.
                        A <emphasis>traffic.cpp</emphasis> forrásfájlban található ennek a használata:
                        <programlisting language="C++">
<![CDATA[
const edge_type Traffic::get_next_routed_edge(const vertex_type start, const vertex_type goal)
{
  const Location& loc = boost::get(boost::vertex_name, graph, goal);

  std::vector<vertex_type> predecessor_map(boost::num_vertices(graph));

  boost::astar_search_tree(graph, start, distance_heuristic(graph, loc),
                           boost::predecessor_map(
                             boost::make_iterator_property_map(
                               predecessor_map.begin(), get(boost::vertex_index, graph))));

  vertex_type v;
  for (v = goal; predecessor_map[v] != start; v = predecessor_map[v])
    ;

  return boost::edge(start, v, graph).first;
}
]]>
                        </programlisting>
                        Az algoritmus által használt távolság heurisztika
                        a vizsgált csomópont és a célcsomópont közti távolságon alapszik.
                        Az eredményül kapott útvonal csomópontjait a <emphasis>predecessor_map</emphasis>
                        tábla tárolja.
                        Az utolsó előtti csomópontra van szükségünk,
                        ami megmondja, hogy merre haladjon tovább az autó,
                        viszont az útvonal csomópontjait csak a céltól kezdve tudjuk bejárni.
                        Az útvonalat alkotó elemek a táblában úgy szerepelnek, hogy
                        az elem kulcsa az adott csomópont azonósítója és
                        az elem értéke a kulcsban tárolt csomópontot megelőző csomópont azonosítója.
                        Ez alapján lehet bejárni az útvonal csomópontjait.
                    </para>
                </section>
            </section>
            <section>
                <title>Felhasznált szoftver eszközök</title>
                <para>
                    A fejlesztés során felhasznált szoftver eszközök és azok licencei
                    az <emphasis>Open source software submission form</emphasis> (OSS) alapján
                    <citation>FASS</citation> lettek dokumentálva:
                    <informaltable frame="all" xmlns="http://docbook.org/ns/docbook">
                        <tgroup cols="2">
                            <colspec colname="c1" colwidth="*"/>
                            <colspec colname="c2" colwidth="3*"/>
                            <tbody>
                                <row>
                                    <entry>Name of software</entry>
                                    <entry>
                                        Libosmium
                                    </entry>
                                </row>
                                <row>
                                    <entry>URL to obtain the software</entry>
                                    <entry>
                                        https://github.com/osmcode/libosmium
                                    </entry>
                                </row>
                                <row>
                                    <entry>Type of intended usage</entry>
                                    <entry>
                                        use as library
                                    </entry>
                                </row>
                                <row>
                                    <entry>For which parts of the system is the software intended to be used?</entry>
                                    <entry>
                                        for working with OpenStreetMap data
                                    </entry>
                                </row>
                                <row>
                                    <entry>Name of license(s)</entry>
                                    <entry>
                                        Boost Software License
                                    </entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </informaltable>
                    <informaltable frame="all" xmlns="http://docbook.org/ns/docbook">
                        <tgroup cols="2">
                            <colspec colname="c1" colwidth="*"/>
                            <colspec colname="c2" colwidth="3*"/>
                            <tbody>
                                <row>
                                    <entry>Name of software</entry>
                                    <entry>
                                        Boost Graph Library
                                    </entry>
                                </row>
                                <row>
                                    <entry>URL to obtain the software</entry>
                                    <entry>
                                        http://www.boost.org
                                    </entry>
                                </row>
                                <row>
                                    <entry>Type of intended usage</entry>
                                    <entry>
                                        use as library
                                    </entry>
                                </row>
                                <row>
                                    <entry>For which parts of the system is the software intended to be used?</entry>
                                    <entry>
                                        for creating a graph and for routing
                                    </entry>
                                </row>
                                <row>
                                    <entry>Name of license(s)</entry>
                                    <entry>
                                        Boost Software License
                                    </entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </informaltable>
                    <informaltable frame="all" xmlns="http://docbook.org/ns/docbook">
                        <tgroup cols="2">
                            <colspec colname="c1" colwidth="*"/>
                            <colspec colname="c2" colwidth="3*"/>
                            <tbody>
                                <row>
                                    <entry>Name of software</entry>
                                    <entry>
                                        Qt5 framework
                                    </entry>
                                </row>
                                <row>
                                    <entry>URL to obtain the software</entry>
                                    <entry>
                                        http://www.qt.io/qt5-4
                                    </entry>
                                </row>
                                <row>
                                    <entry>Type of intended usage</entry>
                                    <entry>
                                        use as library
                                    </entry>
                                </row>
                                <row>
                                    <entry>For which parts of the system is the software intended to be used?</entry>
                                    <entry>
                                        for the display component
                                    </entry>
                                </row>
                                <row>
                                    <entry>Name of license(s)</entry>
                                    <entry>
                                        GNU LGPL
                                    </entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </informaltable>
                    <informaltable frame="all" xmlns="http://docbook.org/ns/docbook">
                        <tgroup cols="2">
                            <colspec colname="c1" colwidth="*"/>
                            <colspec colname="c2" colwidth="3*"/>
                            <tbody>
                                <row>
                                    <entry>Name of software</entry>
                                    <entry>
                                        Doxygen
                                    </entry>
                                </row>
                                <row>
                                    <entry>URL to obtain the software</entry>
                                    <entry>
                                        http://www.doxygen.org
                                    </entry>
                                </row>
                                <row>
                                    <entry>Type of intended usage</entry>
                                    <entry>
                                        tool
                                    </entry>
                                </row>
                                <row>
                                    <entry>For which parts of the system is the software intended to be used?</entry>
                                    <entry>
                                        for generating documentation
                                    </entry>
                                </row>
                                <row>
                                    <entry>Name of license(s)</entry>
                                    <entry>
                                        GNU GPL
                                    </entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </informaltable>
                    <informaltable frame="all" xmlns="http://docbook.org/ns/docbook">
                        <tgroup cols="2">
                            <colspec colname="c1" colwidth="*"/>
                            <colspec colname="c2" colwidth="3*"/>
                            <tbody>
                                <row>
                                    <entry>Name of software</entry>
                                    <entry>
                                        KDevelop
                                    </entry>
                                </row>
                                <row>
                                    <entry>URL to obtain the software</entry>
                                    <entry>
                                        https://www.kdevelop.org
                                    </entry>
                                </row>
                                <row>
                                    <entry>Type of intended usage</entry>
                                    <entry>
                                        internal developer tool
                                    </entry>
                                </row>
                                <row>
                                    <entry>For which parts of the system is the software intended to be used?</entry>
                                    <entry>
                                        for coding
                                    </entry>
                                </row>
                                <row>
                                    <entry>Name of license(s)</entry>
                                    <entry>
                                        GNU GPL
                                    </entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </informaltable>
                </para>
                <para>
                    A döntés alapján a felsorolt könyvtárak és eszközök használata engedélyezett,
                    mivel a licencek nem okoznak inkompatibilitásokat a GNU GPL licencű fejlesztendő szoftverben.
                </para>
            </section>
            <section>
                <title>A fejlesztés közben felmerült problémák</title>
                <para>
                    A fejlesztés során felszínre került több olyan probléma is,
                    ami a kutatási fázisban nem volt előrelátható.
                    Ezeknek a problémáknak a megoldása változtatott részben a koncepción is.
                </para>
                <section>
                    <title>Nem összefüggő gráf</title>
                    <para>
                        A térkép minőségétől függően és a kiszűrt utakat tekintve,
                        előfordult, hogy a létrehozott gráf nem lett összefüggő,
                        azaz nem teljesült az a feltétel, hogy minden csomópontból
                        minden csomópontba el lehet jutni.
                        A város nagy térképétől leszakadt kisebb darabok nagy gondot jelentettek, mivel
                        ha egy ilyen részben jött létre egy gengszter vagy egy rendőr autó,
                        akkor az nem vett részt az üldözésben.
                    </para>
                    <para>
                        Az egyik megoldás azt feltételezte, hogy az ilyen autók el tudják dönteni magukról,
                        hogy izolált helyen vannak.
                        Rendőr esetén a gengszterek elérhetetlenségéből lehetne következtetni,
                        viszont ez újabb fölösleges bonyolultságot eredményezne,
                        amire a forgalomirányító algoritmusoknak fel kellene készülniük,
                        ezért ezt a megoldást elvetettem.
                    </para>
                    <para>
                        A másik megoldás, ami implementálva is lett, a gráf összefüggővé alakításán alapszik.
                        A boost biztosít ennek a célnak megfelelő eszközöket,
                        amik közül a <emphasis>boost::make_connected</emphasis> metódus minimális számú él beszúrásával
                        összefüggővé teszi a gráfot.
                        Ezzel csak annyi a probléma, hogy ezáltal nem a valóságnak megfelelő térképet kapunk,
                        ami megtévesztő is lehet.
                        Egy másik eszköz mélységi kereső algoritmussal bejárja a gráfot és
                        megszámozza az összefüggő részgráfok csomópontjait ugyanazzal a számmal.
                        Ebből adódóan a legnagyobb részgráf lesz a város térképét alkotó összefüggő gráf,
                        a többi részgráfot töröljük.
                    </para>
                    <para>
                        <programlisting language="C++">
<![CDATA[
std::vector<vertex_type> component(boost::num_vertices(graph));
boost::connected_components(graph, &component[0]);

for (vertex_type i = component.size()-1; i > 0; i--)
{
  if (component[i] != 0)
  {
    boost::clear_vertex(i, graph);
    boost::remove_vertex(i, graph);
  }
}
]]>
                        </programlisting>
                        Fontos megjegyezni, hogy a gráf csomópontjainak és éleinek a törlése nem biztonságos művelet.
                        Mivel a csomópontokról tudjuk, hogy melyik hova tartozik,
                        ezért azoknak a törlésével szüntetjük meg a részgráfokat.
                        A csomópontok tárolója <emphasis>std::vector</emphasis> típusú,
                        így egy elem törlése az őt követő elemek átrendezésével történik,
                        ami érvényteleníti az elemek azonosítóit.
                        Ennek elkerülésére az elemeket fordított sorrendben töröljük,
                        előbb törölve a csomóponthoz kapcsolódó éleket,
                        majd magát a csomópontot.
                    </para>
                    <para>
                        Az eredmény Debrecen térképével:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    Nem összefüggő gráf
                                </para>
                                <para>
                                    verticies: 21941
                                </para>
                                <para>
                                    edges: 24531
                                </para>
                                <figure xml:id="with_isolated">
                                    <title>Debrecen város térképének nem összefüggő gráfja az emulátor megjelenítőjében</title>
                                    <mediaobject>
                                        <imageobject>
                                            <imagedata fileref="figures/with_isolated.png"/>
                                        </imageobject>
                                    </mediaobject>
                                </figure>
                            </listitem>
                            <listitem>
                                <para>
                                    Összefüggő gráf
                                </para>
                                <para>
                                    verticies: 21336
                                </para>
                                <para>
                                    edges: 23982
                                </para>
                                <figure xml:id="without_isolated">
                                    <title>Debrecen város térképének összefüggő gráfja az emulátor megjelenítőjében</title>
                                    <mediaobject>
                                        <imageobject>
                                            <imagedata fileref="figures/without_isolated.png"/>
                                        </imageobject>
                                    </mediaobject>
                                </figure>
                            </listitem>
                        </itemizedlist>
                    </para>
                </section>
            </section>
            <section>
                <title>Tesztelés</title>
                <para>
                    Az emulátor fejlesztése közben meg kellett arról bizonyosodni,
                    hogy a kutatás során elképzelt koncepció jól működik-e,
                    mert ha nem, akkor változtatni kell az agilis módszertannak megfelelően.
                </para>
                <section>
                    <title>A routing algoritmus és a gráf éleinek súlya</title>
                    <para>
                        A Justina prototípusban a forgalomirányító algoritmust befolyásoló tényező
                        gráf éleihez rendelt súlyok.
                        Még azelőtt, hogy elárasztanánk a várost autókkal,
                        tesztelésre került, hogy egyáltalán életképes-e ez a felfogás.
                        Vajon elkerüli-e az autó a forgalmas útszakaszt?
                    </para>
                    <para>
                        A teszt lebonyolításához kiválasztásra került Debrecen egyik utcája, a Kassai út.
                        Az algoritmus a térképen megjelölt két koordinátát kapja meg bemenetként,
                        és eredményül visszaadja a tervezett útvonalban résztvevő csomópontok egy listáját,
                        amit a megjelenítő kirajzol.
                        <figure xml:id="kassai1">
                            <title>Útvonaltervezés az emulátor megjelenítőjében, Debrecen város alaphelyzetben</title>
                            <mediaobject>
                                <imageobject>
                                    <imagedata fileref="figures/direct.png"/>
                                </imageobject>
                            </mediaobject>
                        </figure>
                        Jól látható, hogy az útvonal áthalad a Kassai úton.
                    </para>
                    <para>
                        Ezt követően a gráfot úgy építjük fel, hogy a teszthez választott utakhoz tartozó
                        éleknek nagy legyen a súlya, így azok kevésbé kerülnek kiválasztásra
                        az útkereső algoritmus által.
                        <figure xml:id="kassai2">
                            <title>Útvonaltervezés az emulátor megjelenítőjében, a Kassai útnak nagy súlya van</title>
                            <mediaobject>
                                <imageobject>
                                    <imagedata fileref="figures/diversion.png"/>
                                </imageobject>
                            </mediaobject>
                        </figure>
                        Ez esetben az algoritmus sikeresen átment a teszten,
                        mivel az útvonal elkerüli a forgalmas utakat.
                    </para>
                </section>
            </section>
            <section>
                <title>Szoftver eredmények</title>
                <para>
                    Végezetül a Justina emulátor fordítása és futtatása az alábbi lépésekkel történik.
                </para>
                <para>
                    Fordítás:
                    <screen>
<![CDATA[
andras@G53SW:~/Programs/Mapview$ mkdir build
andras@G53SW:~/Programs/Mapview$ cd build/
andras@G53SW:~/Programs/Mapview/build$ cmake ..
-- The C compiler identification is GNU 4.9.2
-- The CXX compiler identification is GNU 4.9.2
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Boost version: 1.55.0
-- Found OSMIUM: /usr/local/include  
-- Found OSMPBF: /usr/lib/libosmpbf.a  
-- Looking for include file pthread.h
-- Looking for include file pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - not found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE  
-- Found PROTOBUF: /usr/lib/x86_64-linux-gnu/libprotobuf.so  
-- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version "1.2.8") 
-- Found EXPAT: /usr/lib/x86_64-linux-gnu/libexpat.so (found version "2.1.0") 
-- Found BZip2: /usr/lib/x86_64-linux-gnu/libbz2.so (found version "1.0.6") 
-- Looking for BZ2_bzCompressInit in /usr/lib/x86_64-linux-gnu/libbz2.so
-- Looking for BZ2_bzCompressInit in /usr/lib/x86_64-linux-gnu/libbz2.so - found
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of google::sparsetable<int>::size_type
-- Check size of google::sparsetable<int>::size_type - done
-- Found Doxygen: /usr/bin/doxygen (found version "1.8.9.1") 
-- Configuring done
-- Generating done
-- Build files have been written to: /home/andras/Programs/Mapview/build
andras@G53SW:~/Programs/Mapview/build$ make
Scanning dependencies of target Mapview_automoc
[ 16%] Automatic moc for target Mapview
Generating moc_mapview.cpp
Generating moc_traffic.cpp
[ 16%] Built target Mapview_automoc
Scanning dependencies of target Mapview
[ 33%] Building CXX object src/CMakeFiles/Mapview.dir/main.cpp.o
[ 50%] Building CXX object src/CMakeFiles/Mapview.dir/mapview.cpp.o
[ 66%] Building CXX object src/CMakeFiles/Mapview.dir/traffic.cpp.o
[ 83%] Building CXX object src/CMakeFiles/Mapview.dir/create_graph.cpp.o
[100%] Building CXX object src/CMakeFiles/Mapview.dir/Mapview_automoc.cpp.o
Linking CXX executable Mapview
[100%] Built target Mapview
]]>
                    </screen>
                </para>
                <para>
                    Dokumentáció generálása:
                    <screen>
<![CDATA[
andras@G53SW:~/Programs/Mapview$ make doc
Scanning dependencies of target doc
[100%] Generating API documentation with Doxygen
...
[100%] Built target doc
]]>
                    </screen>
                </para>
                <para>
                    Futtatás:
                    <screen>
<![CDATA[
andras@G53SW:~/Programs/Mapview/build$ src/Mapview ~/debrecen.osm 
Justina Robocar City Emulator, Copyright (C) 2015 András Mamenyák
This program comes with ABSOLUTELY NO WARRANTY;
This is free software, and you are welcome to redistribute it
under certain conditions.

Constructing connected graph from /home/andras/debrecen.osm
verticies: 21336
edges: 23982
Populating traffic with 1000 civil cars, 100 gangster cars and 10 cop cars
cars: 1110
Gangster car caught! Remaining: 99
Gangster car caught! Remaining: 98
]]>
                    </screen>
                </para>
                <para>
                    Képernyőkép a futásról:
                    <figure xml:id="Justina">
                        <title>Justina Robocar City Emulator</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="figures/Justina.png"/>
                            </imageobject>
                        </mediaobject>
                    </figure>
                </para>
            </section>
        </section>
    </section>
    <section>
        <title>Befejezés</title>
        <section>
            <title>Összegzés</title>
            <para>
                A Robotautó Világbajnokság platformja egy forradalmi változást hozhat az önjáró autók fejlesztésében.
                A Robocar City Emulator feladata a legjobb forgalomirányító algoritmus megtalálása.
                Az algoritmusnak versenyhelyzetben kell bizonyítania.
                Ezt a versenyt jelenleg a rendőrautós üldözés képviseli, amiben az a cél,
                hogy a rendőrautó ágenseket irányítva kell elkapni a városban közlekedő gengszter ágenseket.
                Mindezt nehezíti, hogy az úton közlekedő rutin autók sokan vannak,
                amik belassult közlekedést vagy akár dugót is okozhatnak,
                Ennek köszönhetően a feladatra nem alkalmas routing algoritmusok hamar felszínre kerülnek.
            </para>
            <para>
                A kutatás eredményeként megállapításra került,
                hogy az emulátor bemenetét az OpenStreetMap térképei adják majd.
                Az adatok kezelésére a nyílt forrású C++-os Libosmium könyvtárat használjuk,
                amiből felépítjük a város gráfját a boost könyvtárcsomag segítségével.
            </para>
            <para>
                Saját fejlesztésem, a Justina prototípus, párhuzamosan készült egy másik prototípussal,
                a Justine-al, ezáltal versengést teremtve a fejlesztésben.
                A koncepció alapján az emulátor támogatja a nagyszámú robotautó forgalmat,
                viszont azzal a megszorítással, hogy a szoftver magába foglalja az összes komponenst,
                így nem alkalmas egy verseny lebonyolítására.
                Az emulátor kutatási szerepet lát el, támogatva a szimulációs számítások végzését
                valóságos paraméterek mellett.
            </para>
            <para>
                A kutatást és a fejlesztést a FIRST (Future Internet for Smart City Applications),
                TÁMOP-4.2.2.C-11/1/KONV-2012-0001 projekt támogatta.
            </para>
        </section>
        <section>
            <title>Továbbfejlesztési tervek és lehetőségek</title>
            <para>
                A jövőre nézve számos lehetőség adott, amivel gazdagabbá lehet tenni a platformot és
                valóságosabbá a szimulációt.
                Következő mérföldkő a városi adatfelhő megtervezése,
                ami valós adatokkal látná el az emulátort.
                Az adatokat a <xref linkend="Tetris-terv"/> alapján
                mind automatikus, mind kézi adatgyűjtők szolgáltatnák.
            </para>
            <para>
                Jelenleg is több tervezett publikáció van készülőben,
                amelyek közt van már beküldött kézirat is,
                amiben a Robotautó Világbajnokság kerül bemutatásra <citation>OOCWC</citation>.
            </para>
        </section>
    </section>
    <section>
        <title>Köszönet</title>
        <para>
            Hálával tartozom dr. Bátfai Norbert témavezetőmnek, aki a dolgozat megírásához hasznos tanácsaival, jó ötleteivel és odafigyelésével járult hozzá.
        </para>
    </section>
    <bibliography>
        <title>Irodalomjegyzék</title>
        <biblioentry>
            <abbrev>DocBook</abbrev>
            <authorgroup>
                <author>
                    <personname>
                        <firstname>Norman</firstname>
                        <surname>Walsh</surname>
                    </personname>
                </author>
            </authorgroup>
            <title>DocBook 5.1: The Definitive Guide</title>
            <publisher>
                <publishername>O'Reilly Media, 
                    <link xlink:href="http://www.docbook.org/tdg51/en/html/docbook.html">
                        http://www.docbook.org/tdg51/en/html/docbook.html
                    </link>
                </publishername>                    
            </publisher>
            <pubdate>2014</pubdate>
        </biblioentry>
        <biblioentry>
            <abbrev>Singapore</abbrev>
            <authorgroup>
                <author>
                    <personname>
                        <firstname>Kevin</firstname>
                        <surname>Spieser</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Kyle Ballantyne</firstname>
                        <surname>Treleaven</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Rick</firstname>
                        <surname>Zhang</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Emilio</firstname>
                        <surname>Frazzoli</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Daniel</firstname>
                        <surname>Morton</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Marco</firstname>
                        <surname>Pavone</surname>
                    </personname>
                </author>
            </authorgroup>
            <title>Toward a Systematic Approach to the Design and Evaluation of Automated Mobility-on-Demand Systems: A Case Study in Singapore</title>
            <publisher>
                <publishername>Springer</publishername>
            </publisher>
            <pubdate>2014</pubdate>
        </biblioentry>
        <biblioentry>
            <abbrev>Micro</abbrev>
            <authorgroup>
                <author>
                    <personname>
                        <firstname>Martin</firstname>
                        <surname>Treiber</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Ansgar</firstname>
                        <surname>Hennecke</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Dirk</firstname>
                        <surname>Helbing</surname>
                    </personname>
                </author>
            </authorgroup>
            <title>Congested traffic states in empirical observations and microscopic simulations</title>
            <publisher>
                <publishername>Phys. Rev. E</publishername>
            </publisher>
            <pubdate>2000</pubdate>
        </biblioentry>
        <biblioentry>
            <abbrev>Cellular</abbrev>
            <authorgroup>
                <author>
                    <personname>
                        <firstname>Kai</firstname>
                        <surname>Nagel</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Michael</firstname>
                        <surname>Schreckenberg</surname>
                    </personname>
                </author>
            </authorgroup>
            <title>A cellular automaton model for freeway traffic</title>
            <publisher>
                <publishername>J. Phys. I France</publishername>
            </publisher>
            <pubdate>1992</pubdate>
        </biblioentry>
        <biblioentry>
            <abbrev>Macro</abbrev>
            <authorgroup>
                <author>
                    <personname>
                        <firstname>Shimao</firstname>
                        <surname>Fan</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Michael</firstname>
                        <surname>Herty</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Benjamin</firstname>
                        <surname>Seibold</surname>
                    </personname>
                </author>
            </authorgroup>
            <title>Comparative model accuracy of a data-fitted generalized Aw-Rascle-Zhang model</title>
            <publisher>
                <publishername>
                    <link xlink:href="http://arxiv.org/abs/1310.8219">
                        http://arxiv.org/abs/1310.8219
                    </link>
                </publishername>
            </publisher>
            <pubdate>2014</pubdate>
        </biblioentry>
        <biblioentry>
            <abbrev>OSMstats</abbrev>
            <title>OpenStreetMap stats</title>
            <publisher>
                <publishername>
                    <link xlink:href="http://www.openstreetmap.org/stats/data_stats.html">
                        http://www.openstreetmap.org/stats/data_stats.html
                    </link>
                </publishername>
            </publisher>
        </biblioentry>
        <biblioentry>
            <abbrev>GWI</abbrev>
            <title>Top global smartphone apps, who’s in the top 10</title>
            <publisher>
                <publishername>
                    GlobalWebIndex,
                    <link xlink:href="http://www.globalwebindex.net/blog/top-global-smartphone-apps">
                        http://www.globalwebindex.net/blog/top-global-smartphone-apps
                    </link>                    
                </publishername>
            </publisher>
            <pubdate>2013</pubdate>
        </biblioentry>
        <biblioentry>
            <abbrev>BingAerial</abbrev>
            <title>Microsoft Bing Maps Imagery Service Editor Application API's Terms Of Use</title>
            <publisher>
                <publishername>
                    <link xlink:href="https://wiki.openstreetmap.org/w/images/d/d8/Bing_license.pdf">
                        https://wiki.openstreetmap.org/w/images/d/d8/Bing_license.pdf
                    </link>
                </publishername>
            </publisher>
            <pubdate>2010</pubdate>
        </biblioentry>
        <biblioentry>
            <abbrev>RCEMU</abbrev>
            <authorgroup>
                <author>
                    <personname>
                        <firstname>Norbert</firstname>
                        <surname>Bátfai</surname>
                    </personname>
                </author>
            </authorgroup>
            <title>A Robotautó Világbajnokság - Robocar City Emulator szoftverkövetelmény specifikációja</title>
            <subtitle>Az intelligens város és a robotautók kapcsolata vizsgálatának kutatási platformja</subtitle>
            <publisher>
                <publishername>
                    <link xlink:href="http://robocar.inf.unideb.hu/~norbi/doc/robocaremu-SRS-hu.pdf">
                        http://robocar.inf.unideb.hu/~norbi/doc/robocaremu-SRS-hu.pdf
                    </link>
                </publishername>                    
            </publisher>
            <pubdate>2014</pubdate>
        </biblioentry>
        <biblioentry>
            <abbrev>Terv</abbrev>
            <authorgroup>
                <author>
                    <personname>
                        <firstname>Norbert</firstname>
                        <surname>Bátfai</surname>
                    </personname>
                </author>
            </authorgroup>
            <title>Robotautó Világbajnokság</title>
            <subtitle>Kutatási terv</subtitle>
            <publisher>
                <publishername>
                    <link xlink:href="http://robocar.inf.unideb.hu/~norbi/doc/RobotautoVBKutatasiTerv.pdf">
                        http://robocar.inf.unideb.hu/~norbi/doc/RobotautoVBKutatasiTerv.pdf
                    </link>
                </publishername>                    
            </publisher>
            <pubdate>2014</pubdate>
        </biblioentry>
        <biblioentry>
            <abbrev>FASS</abbrev>
            <authorgroup>
                <author>
                    <personname>
                        <firstname>Norbert</firstname>
                        <surname>Bátfai</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Péter</firstname>
                        <surname>Jeszenszky</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>András</firstname>
                        <surname>Mamenyák</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Béla</firstname>
                        <surname>Halász</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Renátó</firstname>
                        <surname>Besenczi</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>János</firstname>
                        <surname>Komzsik</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Balázs</firstname>
                        <surname>Kóti</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Gergely</firstname>
                        <surname>Kövér</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Máté</firstname>
                        <surname>Smajda</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Csaba</firstname>
                        <surname>Székelyhídi</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Tamás</firstname>
                        <surname>Takács</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Géza</firstname>
                        <surname>Róka</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Márton</firstname>
                        <surname>Ispány</surname>
                    </personname>
                </author>
            </authorgroup>
            <title>IT Innovations in the FootballAvatar Project aimed to develop a Simulation-based Decision Support System</title>
            <publisher>
                <publishername>
                    submitted manuscript
                </publishername>                    
            </publisher>
            <pubdate>2015</pubdate>
        </biblioentry>
        <biblioentry>
            <abbrev>OOCWC</abbrev>
            <authorgroup>
                <author>
                    <personname>
                        <firstname>Norbert</firstname>
                        <surname>Bátfai</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Renátó</firstname>
                        <surname>Besenczi</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>András</firstname>
                        <surname>Mamenyák</surname>
                    </personname>
                </author>
                <author>
                    <personname>
                        <firstname>Márton</firstname>
                        <surname>Ispány</surname>
                    </personname>
                </author>
            </authorgroup>
            <title>OOCWC: The Robocar World Championship Initiative</title>
            <publisher>
                <publishername>
                    submitted manuscript
                </publishername>                    
            </publisher>
            <pubdate>2015</pubdate>
        </biblioentry>
    </bibliography>
</article>
